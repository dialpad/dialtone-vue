{"version":3,"file":"checkbox_group.stories-371292df.js","sources":["../../components/checkbox_group/checkbox_group.vue","../../components/checkbox_group/checkbox_group_default.story.vue","../../components/checkbox_group/checkboxes_decorator.vue","../../components/checkbox_group/checkbox_group_variants.story.vue"],"sourcesContent":["<script>\nimport Vue from 'vue';\nimport { DtInputGroup } from '../input_group';\n\n/**\n * Checkbox Groups are convenience components for a grouping of related Checkboxes.\n * While each Checkbox within the group is independent, the `v-model` on the group provides\n * a convenient interface for determining which Checkboxes within the group are checked.\n * @see https://dialpad.design/components/checkbox_group.html\n */\nexport default {\n  name: 'DtCheckboxGroup',\n\n  extends: DtInputGroup,\n\n  model: {\n    prop: 'selectedValues',\n  },\n\n  props: {\n    /**\n     * Not supported by this component, please use selectedValues\n     */\n    value: {\n      type: [],\n      default: null,\n      validator: value => {\n        if (!value) {\n          return true;\n        }\n\n        Vue.util.warn(\n          'Component uses selectedValues to initialize the model, value is not supported by this component',\n          this,\n        );\n\n        return false;\n      },\n    },\n\n    /**\n     * A provided list of selected values(s) for the checkbox group\n     * @model selectedValues\n     */\n    selectedValues: {\n      type: Array,\n      default () {\n        return [];\n      },\n    },\n\n    /**\n     * A data qa tag for the radio group\n     */\n    dataQaGroup: {\n      type: String,\n      default: 'checkbox-group',\n    },\n\n    /**\n     * A data qa tag for the radio group legend\n     */\n    dataQaGroupLegend: {\n      type: String,\n      default: 'checkbox-group-legend',\n    },\n\n    /**\n     * A data qa tag for the radio group messages\n     */\n    dataQaGroupMessages: {\n      type: String,\n      default: 'checkbox-group-messages',\n    },\n  },\n\n  emits: [\n    /**\n     * Native input event\n     *\n     * @event input\n     * @type {Array}\n     */\n    'input',\n  ],\n\n  data () {\n    return {\n      internalValue: this.selectedValues,\n      // wrap values in object to make reactive\n      provideObj: {\n        selectedValues: this.selectedValues,\n      },\n    };\n  },\n\n  watch: {\n    selectedValues (newSelectedValues) {\n      this.internalValue = newSelectedValues;\n    },\n\n    /*\n     * watching value to support 2 way binding for slotted checkboxes.\n     * need this to pass value to slotted checkboxes if modified outside\n     * checkbox group.\n     */\n    internalValue (newInternalValue) {\n      this.provideObj.selectedValues = newInternalValue;\n    },\n  },\n\n  methods: {\n    /*\n     * provided value to support 2 way binding for slotted checkboxes.\n     * slotted checkbox will change this value and need to emit new value up.\n     */\n    setGroupValue (value, checked) {\n      if (!checked) {\n        this.internalValue = this.internalValue.filter(checkedValue => checkedValue !== value);\n      } else if (!this.internalValue.includes(value)) {\n        this.internalValue.push(value);\n      }\n\n      this.$emit('input', this.internalValue);\n    },\n\n    getMessageKey (type, index) {\n      return `checkbox-group-message-${type}-${index}-${this.id}`;\n    },\n  },\n};\n</script>\n","<template>\n  <dt-checkbox-group\n    :id=\"id\"\n    :name=\"name\"\n    :legend=\"legend\"\n    :selected-values=\"selectedValues\"\n    :disabled=\"disabled\"\n    :messages=\"messages\"\n    :show-messages=\"showMessages\"\n    :legend-class=\"legendClass\"\n    :messages-class=\"messagesClass\"\n    :legend-child-props=\"legendChildProps\"\n    :messages-child-props=\"messagesChildProps\"\n    @input=\"onInput\"\n  >\n    <slot>\n      <dt-checkbox\n        v-for=\"option in options\"\n        :key=\"option.value\"\n        :value=\"option.value\"\n      >\n        <span>{{ option.label }}</span>\n      </dt-checkbox>\n    </slot>\n    <template\n      v-if=\"legendSlot\"\n      slot=\"legend\"\n    >\n      <span v-html=\"legendSlot\" />\n    </template>\n  </dt-checkbox-group>\n</template>\n\n<script>\nimport { DtCheckbox } from '../checkbox';\nimport DtCheckboxGroup from './checkbox_group.vue';\n\nexport default {\n  name: 'CheckboxGroupDefault',\n  components: { DtCheckbox, DtCheckboxGroup },\n};\n</script>\n","<template>\n  <div>\n    <dt-checkbox\n      v-for=\"option in options\"\n      :key=\"option.value\"\n      :value=\"option.value\"\n    >\n      <span>{{ option.label }}</span>\n    </dt-checkbox>\n  </div>\n</template>\n\n<script>\nimport { DtCheckbox } from '../checkbox';\n\nexport default {\n  name: 'CheckboxesDecorator',\n  components: { DtCheckbox },\n  created () {\n    this.options = [\n      { label: 'Apple', value: 'apple' },\n      { label: 'Banana', value: 'banana' },\n      { label: 'Other', value: 'other' },\n    ];\n  },\n};\n</script>\n","<template>\n  <div id=\"components-checkbox-group--variants-container\">\n    <!-- Default -->\n    <dt-checkbox-group\n      name=\"checkbox-group-default\"\n      aria-label=\"default\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- Default -->\n\n    <!-- With Legend -->\n    <dt-checkbox-group\n      name=\"checkbox-group-with-legend\"\n      legend=\"With Legend\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- With Legend -->\n\n    <!-- With Slotted Legend -->\n    <dt-checkbox-group name=\"checkbox-group-with-slotted-legend\">\n      <dt-checkboxes-decorator />\n      <template slot=\"legend\">\n        With Slotted Legend\n      </template>\n    </dt-checkbox-group>\n    <!-- With Slotted Legend -->\n\n    <!-- With Selected Values -->\n    <dt-checkbox-group\n      name=\"checkbox-group-with-selected-values\"\n      legend=\"With Selected Values\"\n      :selected-values=\"['apple', 'other']\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- With Selected Values -->\n\n    <!-- Disabled -->\n    <dt-checkbox-group\n      name=\"checkbox-group-disabled\"\n      legend=\"Disabled\"\n      disabled\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- Disabled -->\n\n    <!-- With Success Message -->\n    <dt-checkbox-group\n      name=\"checkbox-group-with-success-message\"\n      legend=\"With Success Message\"\n      :messages=\"[{ message: 'Success', type: VALIDATION_MESSAGE_TYPES.SUCCESS }]\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- With Success Message -->\n\n    <!-- With Warning Message -->\n    <dt-checkbox-group\n      name=\"checkbox-group-with-warning-message\"\n      legend=\"With Warning Message\"\n      :messages=\"[{ message: 'Warning', type: VALIDATION_MESSAGE_TYPES.WARNING }]\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- With Warning Message -->\n\n    <!-- With Error Message -->\n    <dt-checkbox-group\n      name=\"checkbox-group-with-error-message\"\n      legend=\"With Error Message\"\n      :messages=\"[{ message: 'Error', type: VALIDATION_MESSAGE_TYPES.ERROR }]\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- With Error Message -->\n\n    <!-- With Error Messages Hidden -->\n    <dt-checkbox-group\n      name=\"checkbox-group-with-error-messages-hidden\"\n      legend=\"With Error Messages Hidden\"\n      :messages=\"[{ message: 'Error', type: VALIDATION_MESSAGE_TYPES.ERROR }]\"\n      :show-messages=\"false\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- With Error Messages Hidden -->\n  </div>\n</template>\n\n<script>\nimport { VALIDATION_MESSAGE_TYPES } from '@/common/constants';\nimport DtCheckboxesDecorator from './checkboxes_decorator.vue';\nimport DtCheckboxGroup from './checkbox_group.vue';\n\nexport default {\n  name: 'CheckboxGroupVariants',\n  components: { DtCheckboxesDecorator, DtCheckboxGroup },\n  created () {\n    this.VALIDATION_MESSAGE_TYPES = VALIDATION_MESSAGE_TYPES;\n  },\n};\n</script>\n"],"names":["_sfc_main","DtInputGroup","value","Vue","this","newSelectedValues","newInternalValue","checked","checkedValue","type","index","DtCheckbox","DtCheckboxGroup","DtCheckboxesDecorator","VALIDATION_MESSAGE_TYPES"],"mappings":"kSAUA,MAAAA,EAAA,CACA,KAAA,kBAEA,QAAAC,EAEA,MAAA,CACA,KAAA,gBACA,EAEA,MAAA,CAIA,MAAA,CACA,KAAA,CAAA,EACA,QAAA,KACA,UAAAC,GACAA,GAIAC,EAAA,KAAA,KACA,kGACAC,UACA,EAEA,IARA,EAUA,EAMA,eAAA,CACA,KAAA,MACA,SAAA,CACA,MAAA,EACA,CACA,EAKA,YAAA,CACA,KAAA,OACA,QAAA,gBACA,EAKA,kBAAA,CACA,KAAA,OACA,QAAA,uBACA,EAKA,oBAAA,CACA,KAAA,OACA,QAAA,yBACA,CACA,EAEA,MAAA,CAOA,OACA,EAEA,MAAA,CACA,MAAA,CACA,cAAA,KAAA,eAEA,WAAA,CACA,eAAA,KAAA,cACA,CACA,CACA,EAEA,MAAA,CACA,eAAAC,EAAA,CACA,KAAA,cAAAA,CACA,EAOA,cAAAC,EAAA,CACA,KAAA,WAAA,eAAAA,CACA,CACA,EAEA,QAAA,CAKA,cAAAJ,EAAAK,EAAA,CACAA,EAEA,KAAA,cAAA,SAAAL,CAAA,GACA,KAAA,cAAA,KAAAA,CAAA,EAFA,KAAA,cAAA,KAAA,cAAA,OAAAM,GAAAA,IAAAN,CAAA,EAKA,KAAA,MAAA,QAAA,KAAA,aAAA,CACA,EAEA,cAAAO,EAAAC,EAAA,CACA,MAAA,0BAAAD,KAAAC,KAAA,KAAA,IACA,CACA,CACA;;gvGC7FA,MAAAV,EAAA,CACA,KAAA,uBACA,WAAA,CAAA,WAAAW,EAAA,gBAAAC,CAAA,CACA,o8BCzBA,MAAAZ,EAAA,CACA,KAAA,sBACA,WAAA,CAAA,WAAAW,CAAA,EACA,SAAA,CACA,KAAA,QAAA,CACA,CAAA,MAAA,QAAA,MAAA,OAAA,EACA,CAAA,MAAA,SAAA,MAAA,QAAA,EACA,CAAA,MAAA,QAAA,MAAA,OAAA,CACA,CACA,CACA,wcCwEA,MAAAX,EAAA,CACA,KAAA,wBACA,WAAA,CAAA,sBAAAa,EAAA,gBAAAD,CAAA,EACA,SAAA,CACA,KAAA,yBAAAE,CACA,CACA;;;;;;;;;;;;;;;;;;;"}
{"version":3,"file":"toggle.stories-3269e7d7.js","sources":["../../components/toggle/toggle_constants.js","../../components/toggle/toggle.vue","../../components/toggle/toggle_default.story.vue","../../components/toggle/toggle_variants.story.vue"],"sourcesContent":["export const TOGGLE_SIZE_MODIFIERS = {\n  sm: 'd-toggle--small',\n  md: '',\n};\n\nexport const TOGGLE_CHECKED_VALUES = [false, true, 'mixed'];\n\nexport default {\n  TOGGLE_SIZE_MODIFIERS,\n};\n","<template>\n  <div class=\"d-d-flex d-ai-center\">\n    <label\n      v-if=\"$slots.default\"\n      :class=\"labelClass\"\n      :for=\"id\"\n      v-bind=\"labelChildProps\"\n      data-qa=\"toggle-label\"\n    >\n      <!-- @slot Slot for the main content -->\n      <slot />\n    </label>\n    <button\n      :id=\"id\"\n      :role=\"toggleRole\"\n      type=\"button\"\n      :aria-checked=\"internalChecked.toString()\"\n      :disabled=\"disabled\"\n      :aria-disabled=\"disabled.toString()\"\n      :class=\"toggleClasses\"\n      v-bind=\"$attrs\"\n      v-on=\"inputListeners\"\n    >\n      <span\n        v-if=\"showIcon\"\n        class=\"d-toggle__inner\"\n      />\n    </button>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue';\nimport utils from '@/common/utils';\nimport { TOGGLE_CHECKED_VALUES, TOGGLE_SIZE_MODIFIERS } from '@/components/toggle/toggle_constants';\n\n/**\n * A toggle (or \"switch\") is a button control element that allows the user to make a binary (on/off) selection.\n * @see https://dialpad.design/components/toggle.html\n */\nexport default {\n\n  name: 'DtToggle',\n\n  inheritAttrs: false,\n\n  model: {\n    prop: 'checked',\n    event: 'change',\n  },\n\n  props: {\n\n    /**\n     * The id of the toggle\n     */\n    id: {\n      type: String,\n      default () { return utils.getUniqueString(); },\n    },\n\n    /**\n     * Disables the toggle interactions\n     * @values true, false\n     */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Value of the toggle\n     * @model checked\n     * @values true, false, 'mixed'\n     */\n    checked: {\n      type: [Boolean, String],\n      default: false,\n      validator: (v) => TOGGLE_CHECKED_VALUES.includes(v),\n    },\n\n    /**\n     * Whether the component toggles on click. If you set this to false it means you will handle the toggling manually\n     * via the checked prop or v-model. Change events will still be triggered.\n     * @values true, false\n     */\n    toggleOnClick: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * The size of the toggle.\n     * @values sm, md\n     */\n    size: {\n      type: String,\n      default: 'md',\n      validator: (s) => Object.keys(TOGGLE_SIZE_MODIFIERS).includes(s),\n    },\n\n    /**\n     * Shows the icon\n     * @values true, false\n     */\n    showIcon: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Used to customize the label container\n     */\n    labelClass: {\n      type: [String, Array, Object],\n      default: '',\n    },\n\n    /**\n     * A set of props that are passed into the label container\n     */\n    labelChildProps: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n\n  emits: [\n    /**\n     * Toggle change event\n     *\n     * @event change\n     * @type {Boolean}\n     * @model change\n     */\n    'change',\n  ],\n\n  data () {\n    return {\n      internalChecked: this.checked,\n    };\n  },\n\n  computed: {\n    inputListeners () {\n      return {\n        ...this.$listeners,\n        click: _ => this.toggleCheckedValue(),\n      };\n    },\n\n    isIndeterminate () {\n      return this.internalChecked === 'mixed';\n    },\n\n    toggleRole () {\n      return this.isIndeterminate ? 'checkbox' : 'switch';\n    },\n\n    toggleClasses () {\n      return [\n        'd-toggle',\n        TOGGLE_SIZE_MODIFIERS[this.size],\n        {\n          'd-toggle--checked': this.internalChecked === true,\n          'd-toggle--disabled': this.disabled,\n          'd-toggle--indeterminate': this.isIndeterminate,\n        },\n      ];\n    },\n  },\n\n  watch: {\n    checked (newChecked) {\n      this.internalChecked = newChecked;\n    },\n  },\n\n  mounted () {\n    this.runValidations();\n  },\n\n  methods: {\n    toggleCheckedValue () {\n      this.$emit('change', !this.internalChecked);\n\n      if (this.toggleOnClick) {\n        this.internalChecked = !this.internalChecked;\n      }\n    },\n\n    hasSlotLabel () {\n      return !!(this.$slots.default);\n    },\n\n    runValidations () {\n      this.validateInputLabels(this.hasSlotLabel(), this.$attrs['aria-label']);\n    },\n\n    validateInputLabels (hasLabel, ariaLabel) {\n      if (!hasLabel && !ariaLabel) {\n        Vue.util.warn(\n          'You must provide an aria-label when there is no label passed',\n          this,\n        );\n      }\n    },\n  },\n};\n</script>\n","<template>\n  <dt-toggle\n    :checked=\"checked\"\n    :disabled=\"disabled\"\n    :size=\"size\"\n    :show-icon=\"showIcon\"\n    :label-class=\"labelClass\"\n    :label-child-props=\"labelChildProps\"\n    :toggle-on-click=\"toggleOnClick\"\n    @change=\"onChange\"\n  >\n    <span\n      v-if=\"defaultSlot\"\n      v-html=\"defaultSlot\"\n    />\n  </dt-toggle>\n</template>\n\n<script>\nimport DtToggle from './toggle.vue';\n\nexport default {\n  name: 'ToggleDefault',\n  components: { DtToggle },\n};\n</script>\n","<template>\n  <div id=\"components-toggle--variants-container\">\n    <!-- Unchecked Initially -->\n    <dt-toggle\n      class=\"d-mt6\"\n      label-class=\"d-mr6\"\n      label=\"Unchecked Initial\"\n    >\n      Checked Initial\n    </dt-toggle>\n\n    <!-- Checked Initially -->\n    <dt-toggle\n      class=\"d-mt6\"\n      label-class=\"d-mr6\"\n      label=\"Checked Initial\"\n      :checked=\"true\"\n    >\n      Checked Initial\n    </dt-toggle>\n\n    <!-- Indeterminate -->\n    <dt-toggle\n      class=\"d-mt6\"\n      label-class=\"d-mr6\"\n      checked=\"mixed\"\n    >\n      Indeterminate\n    </dt-toggle>\n\n    <!-- Checked Disabled -->\n    <dt-toggle\n      class=\"d-mt6\"\n      label-class=\"d-mr6\"\n      :checked=\"true\"\n      :disabled=\"true\"\n    >\n      Disabled Checked\n    </dt-toggle>\n\n    <!-- Unchecked Disabled -->\n    <dt-toggle\n      class=\"d-mt6\"\n      label-class=\"d-mr6\"\n      :disabled=\"true\"\n    >\n      Disabled Unchecked\n    </dt-toggle>\n\n    <!-- Indeterminate Disabled -->\n    <dt-toggle\n      class=\"d-mt6\"\n      label-class=\"d-mr6\"\n      checked=\"mixed\"\n      :disabled=\"true\"\n    >\n      Indeterminate Disabled\n    </dt-toggle>\n\n    <!-- With Flex grow -->\n    <dt-toggle\n      class=\"d-mt6\"\n      label-class=\"d-d-flex d-fl-grow1\"\n    >\n      With Flex Grow\n    </dt-toggle>\n\n    <!-- With Slots -->\n    <dt-toggle\n      class=\"d-mt6\"\n    >\n      <div class=\"d-mr6\">\n        With Slot Label\n      </div>\n    </dt-toggle>\n\n    <!-- With v-model -->\n    <dt-toggle\n      v-model=\"vModelValue\"\n      class=\"d-mt6\"\n    >\n      <div class=\"d-mr6\">\n        With V-Model\n      </div>\n    </dt-toggle>\n\n    <!-- Without icon -->\n    <dt-toggle\n      class=\"d-mt6\"\n      label-class=\"d-mr6\"\n      :show-icon=\"false\"\n    >\n      Without icon\n    </dt-toggle>\n\n    <dt-toggle\n      class=\"d-mt6\"\n      label-class=\"d-mr6\"\n      label=\"Small size\"\n      size=\"sm\"\n    >\n      Small size\n    </dt-toggle>\n  </div>\n</template>\n\n<script>\nimport DtToggle from './toggle.vue';\n\nexport default {\n  name: 'ToggleVariants',\n  components: { DtToggle },\n\n  data () {\n    return {\n      vModelValue: false,\n    };\n  },\n};\n</script>\n"],"names":["TOGGLE_SIZE_MODIFIERS","TOGGLE_CHECKED_VALUES","_sfc_main","utils","v","s","_","newChecked","hasLabel","ariaLabel","Vue","DtToggle"],"mappings":"8MAAO,MAAMA,EAAwB,CACnC,GAAI,kBACJ,GAAI,EACN,EAEaC,EAAwB,CAAC,GAAO,GAAM,OAAO,ECmC1DC,EAAA,CAEA,KAAA,WAEA,aAAA,GAEA,MAAA,CACA,KAAA,UACA,MAAA,QACA,EAEA,MAAA,CAKA,GAAA,CACA,KAAA,OACA,SAAA,CAAA,OAAAC,EAAA,gBAAA,CAAA,CACA,EAMA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EAOA,QAAA,CACA,KAAA,CAAA,QAAA,MAAA,EACA,QAAA,GACA,UAAAC,GAAAH,EAAA,SAAAG,CAAA,CACA,EAOA,cAAA,CACA,KAAA,QACA,QAAA,EACA,EAMA,KAAA,CACA,KAAA,OACA,QAAA,KACA,UAAAC,GAAA,OAAA,KAAAL,CAAA,EAAA,SAAAK,CAAA,CACA,EAMA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EAKA,WAAA,CACA,KAAA,CAAA,OAAA,MAAA,MAAA,EACA,QAAA,EACA,EAKA,gBAAA,CACA,KAAA,OACA,QAAA,KAAA,CAAA,EACA,CACA,EAEA,MAAA,CAQA,QACA,EAEA,MAAA,CACA,MAAA,CACA,gBAAA,KAAA,OACA,CACA,EAEA,SAAA,CACA,gBAAA,CACA,MAAA,CACA,GAAA,KAAA,WACA,MAAAC,GAAA,KAAA,mBAAA,CACA,CACA,EAEA,iBAAA,CACA,OAAA,KAAA,kBAAA,OACA,EAEA,YAAA,CACA,OAAA,KAAA,gBAAA,WAAA,QACA,EAEA,eAAA,CACA,MAAA,CACA,WACAN,EAAA,KAAA,IAAA,EACA,CACA,oBAAA,KAAA,kBAAA,GACA,qBAAA,KAAA,SACA,0BAAA,KAAA,eACA,CACA,CACA,CACA,EAEA,MAAA,CACA,QAAAO,EAAA,CACA,KAAA,gBAAAA,CACA,CACA,EAEA,SAAA,CACA,KAAA,eAAA,CACA,EAEA,QAAA,CACA,oBAAA,CACA,KAAA,MAAA,SAAA,CAAA,KAAA,eAAA,EAEA,KAAA,gBACA,KAAA,gBAAA,CAAA,KAAA,gBAEA,EAEA,cAAA,CACA,MAAA,CAAA,CAAA,KAAA,OAAA,OACA,EAEA,gBAAA,CACA,KAAA,oBAAA,KAAA,aAAA,EAAA,KAAA,OAAA,YAAA,CAAA,CACA,EAEA,oBAAAC,EAAAC,EAAA,CACA,CAAAD,GAAA,CAAAC,GACAC,EAAA,KAAA,KACA,+DACA,IACA,CAEA,CACA,CACA;u8BC5LA,MAAAR,EAAA,CACA,KAAA,gBACA,WAAA,CAAA,SAAAS,CAAA,CACA,4lBCqFA,MAAAT,EAAA,CACA,KAAA,iBACA,WAAA,CAAA,SAAAS,CAAA,EAEA,MAAA,CACA,MAAA,CACA,YAAA,EACA,CACA,CACA;;;;;;;;;;;;;;;;;;;;;;;;"}
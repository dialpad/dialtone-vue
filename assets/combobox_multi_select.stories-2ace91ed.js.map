{"version":3,"file":"combobox_multi_select.stories-2ace91ed.js","sources":["../../recipes/comboboxes/combobox_multi_select/combobox_multi_select_story_constants.js","../../recipes/comboboxes/combobox_multi_select/combobox_multi_select.vue","../../recipes/comboboxes/combobox_multi_select/combobox_multi_select_default.story.vue"],"sourcesContent":["// The item list for default story\nexport const ITEMS_LIST_DATA = [\n  { id: 'item1', value: 'item1', type: 'MAINLINE' },\n  { id: 'item2', value: 'item2', type: 'MAINLINE' },\n  { id: 'item3', value: 'item3', type: 'MAINLINE' },\n  { id: 'item4', value: 'item4', type: 'MAINLINE' },\n  { id: 'item5', value: 'item5', type: 'MAINLINE' },\n  { id: 'item6', value: 'item6', type: 'MAINLINE' },\n  { id: 'item7', value: 'item7', type: 'MAINLINE' },\n  { id: 'item8', value: 'item8', type: 'Other' },\n  { id: 'item9', value: 'item9', type: 'MAINLINE' },\n  { id: 'item10', value: 'item10', type: 'MAINLINE' },\n  { id: 'item11', value: 'item11', type: 'MAINLINE' },\n  { id: 'item12', value: 'item12', type: 'Other' },\n  { id: 'item13', value: 'item13', type: 'MAINLINE' },\n  { id: 'item14', value: 'item14', type: 'MAINLINE' },\n  { id: 'item15', value: 'item15', type: 'MAINLINE' },\n  { id: 'item16', value: 'item16', type: 'MAINLINE' },\n  { id: 'item17', value: 'item17', type: 'MAINLINE' },\n  { id: 'item18', value: 'item18', type: 'Other' },\n  { id: 'item19', value: 'item19', type: 'MAINLINE' },\n  { id: 'item20', value: 'item20', type: 'MAINLINE' },\n  { id: 'item21', value: 'item21', type: 'MAINLINE' },\n  { id: 'item22', value: 'item22', type: 'Other' },\n];\n\nexport const MULTI_SELECT_SIZES = {\n  // Chip has no 'lg' and 'xl' size. So we don't support that in multi-select.\n  EXTRA_SMALL: 'xs',\n  SMALL: 'sm',\n  DEFAULT: 'md',\n};\n\nexport const CHIP_SIZES = {\n  xs: 'xs',\n  sm: 'xs',\n  md: 'sm',\n};\n\nexport const CHIP_TOP_POSITION = {\n  xs: 1.4,\n  sm: 0.4,\n  md: 0.2,\n};\n","<template>\n  <dt-recipe-combobox-with-popover\n    ref=\"comboboxWithPopover\"\n    :label=\"label\"\n    :show-list=\"showList\"\n    :max-height=\"listMaxHeight\"\n    :popover-offset=\"popoverOffset\"\n    :has-suggestion-list=\"hasSuggestionList\"\n    :visually-hidden-close-label=\"visuallyHiddenCloseLabel\"\n    :visually-hidden-close=\"visuallyHiddenClose\"\n    content-width=\"anchor\"\n    :append-to=\"appendTo\"\n    :transition=\"transition\"\n    @select=\"onComboboxSelect\"\n  >\n    <template #input=\"{ onInput }\">\n      <span\n        ref=\"inputSlotWrapper\"\n        class=\"d-ps-relative d-d-block\"\n      >\n        <span\n          ref=\"chipsWrapper\"\n          class=\"d-ps-absolute d-mx2 d-pl1\"\n        >\n          <dt-chip\n            v-for=\"item in selectedItems\"\n            ref=\"chips\"\n            :key=\"item.id\"\n            :label-class=\"['d-chip__label']\"\n            :class=\"['d-mt4', 'd-mx2', 'd-zi-base1']\"\n            :close-button-props=\"{ ariaLabel: 'close' }\"\n            :size=\"CHIP_SIZES[size]\"\n            v-on=\"chipListeners\"\n            @keyup.backspace=\"onChipRemove(item)\"\n            @close=\"onChipRemove(item)\"\n          >\n            {{ item }}\n          </dt-chip>\n        </span>\n\n        <dt-input\n          ref=\"input\"\n          v-model=\"value\"\n          class=\"d-fl-grow1\"\n          :aria-label=\"label\"\n          :label=\"labelVisible ? label : ''\"\n          :description=\"description\"\n          :placeholder=\"inputPlaceHolder\"\n          :show-messages=\"showInputMessages\"\n          :messages=\"inputMessages\"\n          :size=\"size\"\n          v-on=\"inputListeners\"\n          @input=\"onInput\"\n        />\n\n        <dt-validation-messages\n          :validation-messages=\"maxSelectedMessage\"\n          :show-messages=\"showValidationMessages\"\n        />\n      </span>\n    </template>\n\n    <!-- @slot slot for popover header -->\n    <template #header>\n      <div\n        v-if=\"$slots.header\"\n        ref=\"header\"\n      >\n        <slot\n          name=\"header\"\n        />\n      </div>\n    </template>\n\n    <!-- @slot slot for popover list -->\n    <template #list>\n      <div\n        ref=\"list\"\n        @mousedown.prevent\n      >\n        <slot\n          v-if=\"!loading\"\n          name=\"list\"\n        />\n        <div\n          v-else\n          class=\"d-ta-center d-py16\"\n        >\n          {{ loadingMessage }}\n        </div>\n      </div>\n    </template>\n\n    <!-- @slot slot for popover footer -->\n    <template #footer>\n      <div\n        v-if=\"$slots.footer\"\n        ref=\"footer\"\n      >\n        <slot\n          name=\"footer\"\n        />\n      </div>\n    </template>\n  </dt-recipe-combobox-with-popover>\n</template>\n\n<script>\nimport DtRecipeComboboxWithPopover from '@/recipes/comboboxes/combobox_with_popover/combobox_with_popover.vue';\nimport DtInput from '@/components/input/input.vue';\nimport DtChip from '@/components/chip/chip.vue';\nimport DtValidationMessages from '@/components/validation_messages/validation_messages.vue';\nimport { validationMessageValidator } from '@/common/validators';\nimport {\n  POPOVER_APPEND_TO_VALUES,\n} from '@/components/popover/popover_constants';\nimport {\n  MULTI_SELECT_SIZES,\n  CHIP_SIZES,\n  CHIP_TOP_POSITION,\n} from './combobox_multi_select_story_constants';\nimport SrOnlyCloseButtonMixin from '../../../common/mixins/sr_only_close_button';\n\nexport default {\n  name: 'DtRecipeComboboxMultiSelect',\n\n  components: {\n    DtRecipeComboboxWithPopover,\n    DtInput,\n    DtChip,\n    DtValidationMessages,\n  },\n\n  mixins: [SrOnlyCloseButtonMixin],\n\n  props: {\n    /**\n     * String to use for the input label.\n     */\n    label: {\n      type: String,\n      required: true,\n    },\n\n    /**\n     * Determines visibility of input label.\n     * @values true, false\n     */\n    labelVisible: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Description for the input\n     */\n    description: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Input placeholder\n     */\n    placeholder: {\n      type: String,\n      default: 'Select one or start typing',\n    },\n\n    /**\n     * Input validation messages\n     */\n    inputMessages: {\n      type: Array,\n      default: () => [],\n      validator: inputMessages => {\n        return validationMessageValidator(inputMessages);\n      },\n    },\n\n    /**\n     * Show input validation message\n     */\n    showInputMessages: {\n      type: Boolean,\n      default: true,\n    },\n\n    // @TODO: https://dialpad.atlassian.net/browse/DP-52324\n    // type: {\n    //   type: String,\n    //   values: ['input', 'select'],\n    //   default: 'select',\n    // },\n\n    /**\n     * Determines if the list is loading\n     */\n    loading: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * The message when the list is loading\n     */\n    loadingMessage: {\n      type: String,\n      default: 'loading...',\n    },\n\n    /**\n     * Determines when to show the list element and also controls the aria-expanded attribute.\n     * Leaving this null will have the combobox trigger on input focus by default.\n     * If you set this value, the default trigger behavior will be disabled and you can\n     * control it as you need.\n     */\n    showList: {\n      type: Boolean,\n      default: null,\n    },\n\n    /**\n     * Determines maximum height for the popover before overflow.\n     * Possible units rem|px|em\n     */\n    listMaxHeight: {\n      type: String,\n      default: '300px',\n    },\n\n    /**\n     * The selected items\n     */\n    selectedItems: {\n      type: Array,\n      default: function () { return []; },\n    },\n\n    /**\n     * Would be the maximum number of selections you can make. 0 is unlimited\n     */\n    maxSelected: {\n      type: Number,\n      default: 0,\n    },\n\n    /**\n     * Max select message when the max selections is exceeded with the structure:\n     * `[{\"message\": string, \"type\": VALIDATION_MESSAGE_TYPES }]`\n     */\n    maxSelectedMessage: {\n      type: Array,\n      default: function () { return []; },\n    },\n\n    /**\n     * Displays the list when the combobox is focused, before the user has typed anything.\n     * When this is enabled the list will not close after selection.\n     */\n    hasSuggestionList: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Size of the chip, one of `xs`, `sm`, `md`\n     */\n    size: {\n      type: String,\n      default: 'md',\n      validator: (t) => Object.values(MULTI_SELECT_SIZES).includes(t),\n    },\n\n    /**\n     * Sets the element to which the popover is going to append to.\n     * 'body' will append to the nearest body (supports shadow DOM).\n     * @values 'body', 'parent', HTMLElement,\n     */\n    appendTo: {\n      type: [HTMLElement, String],\n      default: 'body',\n      validator: appendTo => {\n        return POPOVER_APPEND_TO_VALUES.includes(appendTo) ||\n            (appendTo instanceof HTMLElement);\n      },\n    },\n\n    /**\n     * Named transition when the content display is toggled.\n     * @see DtLazyShow\n     */\n    transition: {\n      type: String,\n      default: 'fade',\n    },\n  },\n\n  emits: [\n    /**\n     * Native input event\n     *\n     * @event input\n     * @type {String }\n     */\n    'input',\n\n    /**\n     * Event fired when item selected\n     *\n     * @event select\n     * @type {Number}\n     */\n    'select',\n\n    /**\n     * Event fired when item removed\n     *\n     * @event remove\n     * @type {String}\n     */\n    'remove',\n\n    /**\n     * Event fired when max selected items limit is reached\n     *\n     * @event max-selected\n     * @type {Object}\n     */\n    'max-selected',\n  ],\n\n  data () {\n    return {\n      value: '',\n      popoverOffset: [0, 4],\n      showValidationMessages: false,\n      initialInputPadding: {},\n      resizeWindowObserver: null,\n      originalInputSize: null,\n      CHIP_SIZES,\n    };\n  },\n\n  computed: {\n    inputPlaceHolder () {\n      return this.selectedItems?.length > 0 ? '' : this.placeholder;\n    },\n\n    chipListeners () {\n      return {\n        ...this.$listeners,\n        keyup: event => {\n          this.onChipKeyup(event);\n          this.$emit('keyup', event);\n        },\n      };\n    },\n\n    inputListeners () {\n      return {\n        ...this.$listeners,\n        input: event => {\n          this.$emit('input', event);\n          if (this.hasSuggestionList) {\n            this.showComboboxList();\n          }\n        },\n\n        keyup: event => {\n          this.onInputKeyup(event);\n          this.$emit('keyup', event);\n        },\n\n        click: event => {\n          if (this.hasSuggestionList) {\n            this.showComboboxList();\n          }\n        },\n      };\n    },\n  },\n\n  watch: {\n    selectedItems: {\n      async handler () {\n        this.initSelectedItems();\n      },\n    },\n\n    async label () {\n      await this.$nextTick();\n      // Adjust the chips position if label changed\n      this.setChipsTopPosition();\n    },\n\n    async description () {\n      await this.$nextTick();\n      // Adjust the chips position if description changed\n      this.setChipsTopPosition();\n    },\n\n    size: {\n      async handler () {\n        await this.$nextTick();\n        const input = this.getInput();\n        this.revertInputPadding(input);\n        this.originalInputSize = input.getBoundingClientRect().height;\n        this.setInputPadding();\n        this.setChipsTopPosition();\n      },\n    },\n  },\n\n  mounted () {\n    // Recalculate chip position and input padding when resizing window\n    this.resizeWindowObserver = new ResizeObserver(async () => {\n      this.setChipsTopPosition();\n      this.setInputPadding();\n    });\n    this.resizeWindowObserver.observe(document.body);\n\n    this.initSelectedItems();\n  },\n\n  beforeDestroy () {\n    this.resizeWindowObserver?.unobserve(document.body);\n  },\n\n  methods: {\n    async initSelectedItems () {\n      await this.$nextTick();\n      this.setInputPadding();\n      this.setChipsTopPosition();\n      this.setInputMinWidth();\n      this.checkMaxSelected();\n    },\n\n    onChipRemove (item) {\n      this.$emit('remove', item);\n      this.$refs.input?.focus();\n    },\n\n    onComboboxSelect (i) {\n      this.value = '';\n      this.$emit('select', i);\n    },\n\n    showComboboxList () {\n      if (this.showList != null) { return; }\n      this.$refs.comboboxWithPopover?.showComboboxList();\n    },\n\n    closeComboboxList () {\n      if (this.showList != null) { return; }\n      this.$refs.comboboxWithPopover?.closeComboboxList();\n    },\n\n    getChipButtons () {\n      return this.$refs.chips && this.$refs.chips.map(chip => chip.$el.querySelector('button'));\n    },\n\n    getChips () {\n      return this.$refs.chips && this.$refs.chips.map(chip => chip.$el);\n    },\n\n    getLastChipButton () {\n      return this.$refs.chips && this.getChipButtons()[this.getChipButtons().length - 1];\n    },\n\n    getLastChip () {\n      return this.$refs.chips && this.getChips()[this.getChips().length - 1];\n    },\n\n    getFirstChip () {\n      return this.$refs.chips && this.getChips()[0];\n    },\n\n    getInput () {\n      return this.$refs.input?.$refs.input;\n    },\n\n    onChipKeyup (event) {\n      const key = event.code?.toLowerCase();\n      if (key === 'arrowleft') {\n        // Move to the previous chip\n        this.navigateBetweenChips(event.target, true);\n      } else if (key === 'arrowright') {\n        if (event.target.id === this.getLastChipButton().id) {\n          // Move to the input if it's the last chip\n          this.moveFromChipToInput();\n        } else {\n          // Move to the next chip\n          this.navigateBetweenChips(event.target, false);\n        }\n      }\n    },\n\n    onInputKeyup (event) {\n      const key = event.code?.toLowerCase();\n      // If the cursor is at the start of the text,\n      // press 'backspace' or 'left' focuses the last chip\n      if (this.selectedItems.length > 0 && event.target.selectionStart === 0) {\n        if (key === 'backspace' || key === 'arrowleft') {\n          this.moveFromInputToChip();\n        }\n      }\n    },\n\n    moveFromInputToChip () {\n      this.getLastChipButton().focus();\n      this.$refs.input?.blur();\n      this.closeComboboxList();\n    },\n\n    moveFromChipToInput () {\n      this.getLastChipButton().blur();\n      this.$refs.input?.focus();\n      this.showComboboxList();\n    },\n\n    navigateBetweenChips (target, toLeft) {\n      const from = this.getChipButtons().indexOf(target);\n      const to = toLeft ? from - 1 : from + 1;\n      if (to < 0 || to >= this.$refs.chips?.length) {\n        return;\n      }\n      this.getChipButtons()[from].blur();\n      this.getChipButtons()[to].focus();\n      this.closeComboboxList();\n    },\n\n    setChipsTopPosition () {\n      // To place the chips in the input box\n      // The chip \"top\" position should be the same line as the input box\n      const input = this.getInput();\n      if (!input) return;\n      const inputSlotWrapper = this.$refs.inputSlotWrapper;\n      const top = input.getBoundingClientRect().top -\n                  inputSlotWrapper.getBoundingClientRect().top;\n      const chipsWrapper = this.$refs.chipsWrapper;\n      chipsWrapper.style.top = (top - CHIP_TOP_POSITION[this.size]) + 'px';\n    },\n\n    setInputPadding () {\n      const lastChip = this.getLastChip();\n      const input = this.getInput();\n      const chipsWrapper = this.$refs.chipsWrapper;\n      if (!input) return;\n      this.revertInputPadding(input);\n      this.popoverOffset = [0, 4];\n      if (!lastChip) return;\n\n      // Get the position of the last chip\n      // The input cursor should be the same \"top\" as that chip and next besides it\n      const left = lastChip.offsetLeft + this.getFullWidth(lastChip);\n      input.style.paddingLeft = left + 'px';\n\n      // Get the chip size minus the 4px padding\n      const chipsSize = chipsWrapper.getBoundingClientRect().height - 4;\n\n      // Get lastChip offsetTop plus 2px of the input padding.\n      const top = lastChip.offsetTop + 2;\n\n      // Add padding to Top only if the chips need more space\n      if (chipsSize > this.originalInputSize) {\n        input.style.paddingTop = `${top}px`;\n      }\n    },\n\n    revertInputPadding (input) {\n      input.style.paddingLeft = '';\n      input.style.paddingTop = '';\n      input.style.paddingBottom = '';\n    },\n\n    getFullWidth (el) {\n      const styles = window.getComputedStyle(el);\n      return el.offsetWidth + parseInt(styles.marginLeft) + parseInt(styles.marginRight);\n    },\n\n    setInputMinWidth () {\n      // Ensure the width of the input is \"slightly bigger\" than the width of a single chip\n      const firstChip = this.getFirstChip();\n      const input = this.getInput();\n      if (!input) return;\n      if (firstChip) {\n        // Add 4px buffer for typing room\n        input.style.minWidth = (this.getFullWidth(firstChip) + 4) + 'px';\n      } else {\n        input.style.minWidth = '';\n      }\n    },\n\n    checkMaxSelected () {\n      if (this.maxSelected === 0) return;\n      if (this.selectedItems.length > this.maxSelected) {\n        this.showValidationMessages = true;\n        this.$emit('max-selected');\n      } else {\n        this.showValidationMessages = false;\n      }\n    },\n  },\n};\n</script>\n","<template>\n  <dt-recipe-combobox-multi-select\n    ref=\"comboboxMultiSelect\"\n    :label=\"label\"\n    :label-visible=\"labelVisible\"\n    :description=\"description\"\n    :size=\"size\"\n    :loading=\"loading\"\n    :loading-message=\"loadingMessage\"\n    :show-list=\"showList\"\n    :selected-items=\"selectedItems\"\n    :max-selected=\"maxSelected\"\n    :list-max-height=\"listMaxHeight\"\n    :max-selected-message=\"maxSelectedMessage\"\n    :has-suggestion-list=\"hasSuggestionList\"\n    :visually-hidden-close-label=\"visuallyHiddenCloseLabel\"\n    :append-to=\"appendTo\"\n    :transition=\"transition\"\n    @input=\"onComboboxInput\"\n    @select=\"onComboboxSelect\"\n    @remove=\"onComboboxRemove\"\n    @max-selected=\"onComboboxMaxSelected\"\n  >\n    <template\n      v-if=\"header\"\n      #header\n    >\n      <span v-html=\"header\" />\n    </template>\n    <template #list>\n      <ul\n        class=\"d-ps-relative d-stack2 d-m4 d-px0\"\n      >\n        <dt-list-item\n          v-for=\"(item, i) in items\"\n          :key=\"item.id\"\n          role=\"option\"\n          navigation-type=\"arrow-keys\"\n          @click=\"onComboboxSelect(i)\"\n        >\n          {{ item.value }}\n          <template #right>\n            <span class=\"d-fc-secondary\">{{ item.type }}</span>\n          </template>\n        </dt-list-item>\n      </ul>\n    </template>\n    <template\n      v-if=\"footer\"\n      #footer\n    >\n      <span v-html=\"footer\" />\n    </template>\n  </dt-recipe-combobox-multi-select>\n</template>\n\n<script>\nimport DtListItem from '@/components/list_item/list_item.vue';\nimport DtRecipeComboboxMultiSelect from './combobox_multi_select.vue';\nimport { ITEMS_LIST_DATA } from './combobox_multi_select_story_constants';\n\nexport default {\n  name: 'DtRecipeComboboxMultiSelectDefault',\n  components: {\n    DtRecipeComboboxMultiSelect,\n    DtListItem,\n  },\n\n  data () {\n    return {\n      items: ITEMS_LIST_DATA,\n    };\n  },\n\n  methods: {\n    onComboboxInput (value) {\n      // Filter list\n      this.items = ITEMS_LIST_DATA.filter(item => item.value.includes(value));\n      this.onInput(value);\n    },\n\n    onComboboxSelect (i) {\n      if (this.items[i]) {\n        this.onSelect(i);\n\n        const item = this.items[i].value;\n        if (this.selectedItems.includes(item)) {\n          return;\n        }\n        this.selectedItems.push(item);\n\n        // Clear input box and unfilter list\n        this.$refs.comboboxMultiSelect.$data.value = '';\n        this.items = ITEMS_LIST_DATA;\n      }\n    },\n\n    onComboboxMaxSelected () {\n      this.onMaxSelected();\n    },\n\n    onComboboxRemove (item) {\n      this.onRemove(item);\n      const index = this.selectedItems.indexOf(item);\n      if (index < 0) {\n        return;\n      }\n      this.selectedItems.splice(index, 1);\n    },\n  },\n};\n</script>\n"],"names":["ITEMS_LIST_DATA","MULTI_SELECT_SIZES","CHIP_SIZES","CHIP_TOP_POSITION","_sfc_main","DtRecipeComboboxWithPopover","DtInput","DtChip","DtValidationMessages","SrOnlyCloseButtonMixin","inputMessages","validationMessageValidator","appendTo","POPOVER_APPEND_TO_VALUES","_a","event","input","item","i","chip","key","target","toLeft","from","to","inputSlotWrapper","top","chipsWrapper","lastChip","left","chipsSize","el","styles","firstChip","DtRecipeComboboxMultiSelect","DtListItem","value","index"],"mappings":"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"}
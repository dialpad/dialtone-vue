{"version":3,"file":"avatar-208405d8.js","sources":["../../components/avatar/avatar_constants.js","../../components/avatar/avatar.vue"],"sourcesContent":["export const AVATAR_SIZE_MODIFIERS = {\n  xs: 'd-avatar--xs',\n  sm: 'd-avatar--sm',\n  md: 'd-avatar--md',\n  lg: 'd-avatar--lg',\n  xl: 'd-avatar--xl',\n};\n\nexport const AVATAR_KIND_MODIFIERS = {\n  default: '',\n  icon: 'd-avatar__icon',\n  initials: 'd-avatar__initials',\n};\n\nexport const AVATAR_PRESENCE_SIZE_MODIFIERS = {\n  md: 'd-avatar__presence--md',\n  lg: 'd-avatar__presence--lg',\n};\n\nexport const AVATAR_PRESENCE_STATES = {\n  NONE: '',\n  BUSY: 'busy',\n  AWAY: 'away',\n  OFFLINE: 'offline',\n  ACTIVE: 'active',\n};\n\nexport const AVATAR_ICON_SIZES = {\n  xs: undefined,\n  sm: '200',\n  md: '300',\n  lg: '500',\n  xl: '600',\n};\n\nexport const AVATAR_COLORS = [\n  undefined,\n  '100',\n  '200',\n  '300',\n  '400',\n  '500',\n  '600',\n  '700',\n  '800',\n  '900',\n  '1000',\n  '1100',\n  '1200',\n  '1300',\n  '1400',\n  '1500',\n  '1600',\n  '1700',\n  '1800',\n];\n\nexport const AVATAR_GROUP_VALIDATOR = (group) => group > 1;\n\nexport default {\n  AVATAR_SIZE_MODIFIERS,\n  AVATAR_KIND_MODIFIERS,\n  AVATAR_PRESENCE_SIZE_MODIFIERS,\n  AVATAR_PRESENCE_STATES,\n  AVATAR_ICON_SIZES,\n  AVATAR_COLORS,\n  AVATAR_GROUP_VALIDATOR,\n};\n","<template>\n  <div\n    :id=\"id\"\n    :class=\"avatarClasses\"\n    data-qa=\"dt-avatar\"\n  >\n    <div\n      ref=\"canvas\"\n      :class=\"[canvasClass, 'd-avatar__canvas']\"\n    >\n      <!-- @slot Slot for avatar content -->\n      <slot v-if=\"showDefaultSlot\" />\n      <span\n        v-if=\"showInitials\"\n        class=\"d-ps-absolute d-zi-base\"\n        :class=\"AVATAR_KIND_MODIFIERS.initials\"\n      >\n        {{ formattedInitials }}\n      </span>\n    </div>\n    <div\n      v-if=\"overlayIcon || overlayText\"\n      :class=\"overlayClasses\"\n    >\n      <dt-icon\n        v-if=\"overlayIcon\"\n        class=\"d-fc-white d-w100p\"\n        :name=\"overlayIcon\"\n      />\n      <p\n        v-else-if=\"overlayText\"\n        class=\"d-fs-200 d-fw-bold d-fc-white d-w100p d-ta-center\"\n      >\n        {{ overlayText }}\n      </p>\n    </div>\n    <span\n      v-if=\"showGroup\"\n      class=\"d-avatar__count d-zi-base\"\n      data-qa=\"dt-avatar-count\"\n    >{{ formattedGroup }}</span>\n    <dt-presence\n      v-if=\"presence && !showGroup\"\n      :presence=\"presence\"\n      class=\"d-zi-base\"\n      :class=\"[\n        'd-avatar__presence',\n        AVATAR_PRESENCE_SIZE_MODIFIERS[size],\n      ]\"\n      v-bind=\"presenceProps\"\n      data-qa=\"dt-presence\"\n    />\n  </div>\n</template>\n\n<script>\nimport { getUniqueString, getRandomElement } from '@/common/utils';\nimport Vue from 'vue';\nimport { DtPresence } from '../presence';\nimport { DtIcon } from '@/components/icon';\nimport {\n  AVATAR_KIND_MODIFIERS,\n  AVATAR_SIZE_MODIFIERS,\n  AVATAR_PRESENCE_SIZE_MODIFIERS,\n  AVATAR_PRESENCE_STATES,\n  AVATAR_COLORS,\n  AVATAR_GROUP_VALIDATOR,\n} from './avatar_constants';\n\n/**\n * An avatar is a visual representation of a user or object.\n * @see https://dialpad.design/components/avatar.html\n */\nexport default {\n  name: 'DtAvatar',\n  components: { DtPresence, DtIcon },\n\n  inheritAttrs: false,\n\n  props: {\n    /**\n     * Id of the avatar content wrapper element\n     */\n    id: {\n      type: String,\n      default () { return getUniqueString(); },\n    },\n\n    /**\n     * Pass in a seed to get the random color generation based on that string. For example if you pass in a\n     * user ID as the string it will return the same randomly generated colors every time for that user.\n     */\n    seed: {\n      type: String,\n      default: undefined,\n    },\n\n    /**\n     * Set the avatar background to a specific color. If undefined will randomize the color which can be deterministic\n     * if the seed prop is set.\n     */\n    color: {\n      type: String,\n      default: undefined,\n    },\n\n    /**\n     * The size of the avatar\n     * @values xs, sm, md, lg, xl\n     */\n    size: {\n      type: String,\n      default: 'md',\n      validator: (size) => Object.keys(AVATAR_SIZE_MODIFIERS).includes(size),\n    },\n\n    /**\n     * Used to customize the avatar container\n     */\n    avatarClass: {\n      type: [String, Array, Object],\n      default: '',\n    },\n\n    /**\n     * Set classes on the avatar canvas. Wrapper around the core avatar image.\n     */\n    canvasClass: {\n      type: [String, Array, Object],\n      default: '',\n    },\n\n    /**\n     * Determines whether to show the presence indicator for\n     * Avatar - accepts PRESENCE_STATES values: 'busy', 'away', 'offline',\n     * or 'active'. By default, it's null and nothing is shown.\n     * @values null, busy, away, offline, active\n     */\n    presence: {\n      type: String,\n      default: AVATAR_PRESENCE_STATES.NONE,\n      validator: (state) => {\n        return Object.values(AVATAR_PRESENCE_STATES).includes(state);\n      },\n    },\n\n    /**\n     * A set of props to be passed into the presence component.\n     */\n    presenceProps: {\n      type: Object,\n      default: () => ({}),\n    },\n\n    /**\n     * Initials to be shown in the avatar. Used as fallback if image fails to load.\n     */\n    initials: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Determines whether to show a group avatar.\n     * Limit to 2 digits max, more than 99 will be rendered as “99+”.\n     * if the number is 1 or less it would just show the regular avatar as if group had not been set.\n     */\n    group: {\n      type: Number,\n      default: undefined,\n      validator: (group) => AVATAR_GROUP_VALIDATOR(group),\n    },\n\n    /**\n     * The icon that overlays the avatar\n     */\n    overlayIcon: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * The text that overlays the avatar\n     */\n    overlayText: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Used to customize the avatar overlay\n     */\n    overlayClass: {\n      type: [String, Array, Object],\n      default: '',\n    },\n  },\n\n  data () {\n    return {\n      // initials, image or icon\n      kind: null,\n      AVATAR_SIZE_MODIFIERS,\n      AVATAR_KIND_MODIFIERS,\n      AVATAR_PRESENCE_SIZE_MODIFIERS,\n      imageLoadedSuccessfully: null,\n      slottedInitials: '',\n      formattedInitials: '',\n      initializing: false,\n    };\n  },\n\n  computed: {\n    avatarClasses () {\n      return [\n        'd-avatar',\n        AVATAR_SIZE_MODIFIERS[this.validatedSize],\n        this.avatarClass,\n        {\n          'd-avatar--group': this.showGroup,\n          [`d-avatar--color-${this.getColor()}`]: this.kind !== 'icon',\n        },\n      ];\n    },\n\n    overlayClasses () {\n      return [\n        'd-bgc-black-900 d-o70 d-ps-absolute d-w100p d-h100p d-d-flex d-ai-center d-bar-circle d-zi-base',\n        this.overlayClass,\n      ];\n    },\n\n    showDefaultSlot () {\n      return this.kind !== 'initials' ||\n      (this.kind === 'image' && this.imageLoadedSuccessfully === true);\n    },\n\n    showInitials () {\n      return this.kind === 'initials' ||\n      (this.kind === 'image' && this.initials && this.imageLoadedSuccessfully !== true);\n    },\n\n    showGroup () {\n      return AVATAR_GROUP_VALIDATOR(this.group);\n    },\n\n    formattedGroup () {\n      return this.group > 99 ? '99+' : this.group;\n    },\n\n    validatedSize () {\n      // TODO: Group only supports xs size for now. Remove this when we support other sizes.\n      return this.group ? 'xs' : this.size;\n    },\n  },\n\n  mounted () {\n    this.init();\n  },\n\n  updated () {\n    this.init();\n  },\n\n  methods: {\n    async init () {\n      if (this.initializing) return;\n      this.kind = null;\n      await this.$nextTick();\n      const firstChild = this.$refs.canvas?.firstElementChild || this.$refs.canvas;\n      this.formatInitials(this.initials);\n      if (firstChild) {\n        this.setKind(firstChild);\n        this.kindHandler(firstChild);\n      }\n      this.initializing = true;\n      await this.$nextTick();\n      this.initializing = false;\n    },\n\n    // eslint-disable-next-line complexity\n    kindHandler (el) {\n      switch (this.kind) {\n        case 'image':\n          el.classList.add('d-avatar__image');\n          this.validateImageAttrsPresence();\n          this.setImageListeners(el);\n          break;\n        case 'icon':\n          el.classList.add(AVATAR_KIND_MODIFIERS.icon);\n          break;\n        case 'initials':\n          this.slottedInitials = el.text || el.textContent;\n          this.formatInitials(this.slottedInitials.trim() || this.initials);\n          break;\n      }\n    },\n\n    setImageListeners (el) {\n      el.addEventListener('load', () => this._loadedImageEventHandler(el), { once: true });\n      el.addEventListener('error', () => this._erroredImageEventHandler(el), { once: true });\n    },\n\n    formatInitials (initials) {\n      if (!initials || this.validatedSize === 'xs') {\n        this.formattedInitials = '';\n      } else if (this.validatedSize === 'sm') {\n        this.formattedInitials = initials.trim()[0];\n      } else {\n        this.formattedInitials = initials.trim().slice(0, 2);\n      }\n    },\n\n    setKind (element) {\n      if (this.isIconType(element)) { this.kind = 'icon'; return; }\n      if (this.isImageType(element)) { this.kind = 'image'; return; }\n      this.kind = 'initials';\n    },\n\n    isIconType (element) {\n      return element?.tagName?.toUpperCase() === 'SVG';\n    },\n\n    isImageType (element) {\n      return element?.tagName?.toUpperCase() === 'IMG';\n    },\n\n    getColor () {\n      return this.color ?? getRandomElement(AVATAR_COLORS, this.seed);\n    },\n\n    validateImageAttrsPresence () {\n      const isSrcMissing = !this.$refs.canvas.firstChild.getAttribute('src');\n\n      // If alt set to empty string consider it valid, as this is a valid case if the\n      // image is already described by something else (ex: visible description)\n      // eslint-disable-next-line no-unneeded-ternary\n      const isAltMissing = this.$refs.canvas.firstChild.getAttribute('alt') === null;\n\n      if (isSrcMissing || isAltMissing) {\n        Vue.util.warn('src and alt attributes are required for image avatars', this);\n      }\n    },\n\n    _loadedImageEventHandler (el) {\n      this.imageLoadedSuccessfully = true;\n      el.classList.remove('d-d-none');\n      el.classList.add('d-avatar--image-loaded');\n    },\n\n    _erroredImageEventHandler (el) {\n      this.imageLoadedSuccessfully = false;\n      el.classList.remove('d-avatar--image-loaded');\n      el.classList.add('d-d-none');\n    },\n  },\n};\n</script>\n\n<style lang=\"less\">\n.d-avatar--image-loaded {\n  background-color: transparent;\n  background-image: unset;\n}\n</style>\n"],"names":["AVATAR_SIZE_MODIFIERS","AVATAR_KIND_MODIFIERS","AVATAR_PRESENCE_SIZE_MODIFIERS","AVATAR_PRESENCE_STATES","AVATAR_ICON_SIZES","AVATAR_COLORS","AVATAR_GROUP_VALIDATOR","group","_sfc_main","DtPresence","DtIcon","getUniqueString","size","state","firstChild","_a","el","initials","element","getRandomElement","isSrcMissing","isAltMissing","Vue"],"mappings":"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"}
{"version":3,"file":"banner.stories-Wa_Uga2X.js","sources":["../../components/banner/banner.vue","../../components/banner/banner_default.story.vue","../../common/assets/dialpad-gradient.png"],"sourcesContent":["<template>\n  <!-- eslint-disable-next-line vuejs-accessibility/no-static-element-interactions -->\n  <aside\n    :class=\"bannerClass\"\n    :style=\"bannerBackgroundImage\"\n    @keydown.tab=\"trapFocus\"\n  >\n    <div\n      class=\"d-banner__dialog\"\n      :class=\"dialogClass\"\n      :role=\"role\"\n      :aria-labelledby=\"titleId\"\n      :aria-describedby=\"contentId\"\n    >\n      <dt-notice-icon\n        v-if=\"!hideIcon\"\n        :kind=\"kind\"\n        v-on=\"$listeners\"\n      >\n        <!-- @slot Slot for custom icon -->\n        <slot name=\"icon\" />\n      </dt-notice-icon>\n      <dt-notice-content\n        :title-id=\"titleId\"\n        :content-id=\"contentId\"\n        :title=\"title\"\n        v-on=\"$listeners\"\n      >\n        <template #titleOverride>\n          <!-- eslint-disable-next-line max-len -->\n          <!-- @slot Allows you to override the title, only use this if you need to override with something other than text. Otherwise use the \"title\" prop. -->\n          <slot name=\"titleOverride\" />\n        </template>\n        <!-- @slot the main textual content of the banner -->\n        <slot />\n      </dt-notice-content>\n      <dt-notice-action\n        :hide-close=\"hideClose\"\n        :close-button-props=\"closeButtonProps\"\n        :visually-hidden-close=\"visuallyHiddenClose\"\n        :visually-hidden-close-label=\"visuallyHiddenCloseLabel\"\n        v-on=\"$listeners\"\n      >\n        <!-- @slot Enter a possible action for the user to take, such as a link to another page -->\n        <slot name=\"action\" />\n      </dt-notice-action>\n    </div>\n  </aside>\n</template>\n\n<script>\nimport { DtNoticeIcon, DtNoticeContent, DtNoticeAction, NOTICE_KINDS } from '@/components/notice';\nimport Modal from '@/common/mixins/modal';\nimport utils from '@/common/utils';\nimport SrOnlyCloseButtonMixin from '@/common/mixins/sr_only_close_button';\n\n/**\n * Banners are a type of notice, delivering system and engagement messaging.\n * These are highly intrusive notices and should be used sparingly and appropriately.\n * @see https://dialpad.design/components/banner.html\n */\nexport default {\n  name: 'DtBanner',\n\n  components: {\n    DtNoticeIcon,\n    DtNoticeContent,\n    DtNoticeAction,\n  },\n\n  mixins: [Modal, SrOnlyCloseButtonMixin],\n\n  props: {\n    /**\n     * Sets an ID on the title element of the component. Useful for aria-describedby\n     * or aria-labelledby or any other reason you may need an id to refer to the title.\n     */\n    titleId: {\n      type: String,\n      default () { return utils.getUniqueString(); },\n    },\n\n    /**\n     * Sets an ID on the content element of the component. Useful for aria-describedby\n     * or aria-labelledby or any other reason you may need an id to refer to the content.\n     */\n    contentId: {\n      type: String,\n      default () { return utils.getUniqueString(); },\n    },\n\n    /**\n     * Title header of the notice. This can be left blank to remove the title from the notice entirely.\n     */\n    title: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Used in scenarios where the message needs to visually dominate the screen.\n     * This will also change the aria role from status to alertdialog.\n     * and will modally trap the keyboard focus in the dialog as soon as it displays.\n     * @values true, false\n     */\n    important: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Pins the banner to the top of the window and pushes all app content down.\n     * @values true, false\n     */\n    pinned: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Severity level of the notice, sets the icon and background\n     * @values base, error, info, success, warning\n     */\n    kind: {\n      type: String,\n      default: 'base',\n      validate (kind) {\n        return NOTICE_KINDS.includes(kind);\n      },\n    },\n\n    /**\n     * Props for the notice close button.\n     */\n    closeButtonProps: {\n      type: Object,\n      default: () => ({}),\n    },\n\n    /**\n     * Hides the close button from the notice\n     */\n    hideClose: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Hides the icon from the notice\n     * @values true, false\n     */\n    hideIcon: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Inner dialog class\n     */\n    dialogClass: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Banner background image\n     */\n    backgroundImage: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Background image size, follows the background-size CSS property values\n     * <a class=\"d-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-size\" target=\"_blank\">\n     *   CSS background-sizes\n     * </a>\n     */\n    backgroundSize: {\n      type: String,\n      default: 'cover',\n    },\n  },\n\n  emits: [\n    /**\n     * Close button click event\n     *\n     * @event close\n     */\n    'close',\n  ],\n\n  computed: {\n    role () {\n      return this.important ? 'alertdialog' : 'status';\n    },\n\n    bannerClass () {\n      const kindClasses = {\n        error: 'd-banner--error',\n        info: 'd-banner--info',\n        success: 'd-banner--success',\n        warning: 'd-banner--warning',\n        base: 'd-banner--base',\n      };\n\n      return [\n        'd-banner',\n        kindClasses[this.kind],\n        {\n          'd-banner--important': this.important,\n          'd-banner--pinned': this.pinned,\n        },\n      ];\n    },\n\n    bannerBackgroundImage () {\n      if (this.backgroundImage === '') return null;\n\n      return `background-image: url(${this.backgroundImage});\n              background-size: ${this.backgroundSize};`;\n    },\n  },\n\n  mounted () {\n    if (this.important) {\n      this.focusFirstElement();\n    }\n  },\n\n  methods: {\n    trapFocus (e) {\n      if (this.important) {\n        this.focusTrappedTabPress(e);\n      }\n    },\n  },\n};\n</script>\n","<template>\n  <div>\n    <dt-button\n      v-show=\"!displayBanner\"\n      @click=\"displayBanner = true\"\n    >\n      Click to show!\n    </dt-button>\n\n    <dt-banner\n      v-show=\"displayBanner\"\n      :kind=\"$attrs.kind\"\n      :title=\"$attrs.title\"\n      :title-id=\"$attrs.titleId\"\n      :content-id=\"$attrs.contentId\"\n      :important=\"$attrs.important\"\n      :pinned=\"$attrs.pinned\"\n      :hide-close=\"$attrs.hideClose\"\n      :close-button-props=\"buttonCloseProps\"\n      :class=\"{ 'd-ps-sticky': show }\"\n      :hide-icon=\"$attrs.hideIcon\"\n      :background-image=\"$attrs.backgroundImage\"\n      :background-size=\"$attrs.backgroundSize\"\n      :dialog-class=\"$attrs.dialogClass\"\n      :visually-hidden-close=\"$attrs.visuallyHiddenClose\"\n      :visually-hidden-close-label=\"$attrs.visuallyHiddenCloseLabel\"\n      @close=\"displayBanner = false; $attrs.onClose($event)\"\n    >\n      <span\n        v-if=\"$attrs.default\"\n        v-html=\"$attrs.default\"\n      />\n      <span v-else>\n        Message body with\n        <a\n          href=\"#\"\n          class=\"d-link\"\n          :class=\"linkClass\"\n        >a link</a>.\n      </span>\n\n      <template\n        v-if=\"$attrs.action\"\n        slot=\"action\"\n      >\n        <dt-button\n          :kind=\"buttonKind\"\n          importance=\"outlined\"\n          @click=\"$attrs.onClick\"\n        >\n          {{ $attrs.action }}\n        </dt-button>\n      </template>\n      <template\n        v-if=\"$attrs.icon\"\n        slot=\"icon\"\n      >\n        <dt-icon :name=\"$attrs.icon\" />\n      </template>\n      <template\n        v-if=\"$attrs.titleOverride\"\n        slot=\"titleOverride\"\n      >\n        <span v-html=\"$attrs.titleOverride\" />\n      </template>\n    </dt-banner>\n  </div>\n</template>\n\n<script>\nimport { DtBanner } from '@/components/banner';\nimport { DtButton } from '@/components/button';\nimport { DtIcon } from '@/components/icon';\n\nexport default {\n  name: 'BannerDefault',\n\n  components: { DtBanner, DtButton, DtIcon },\n\n  props: {\n    show: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  data () {\n    return {\n      displayBanner: this.show,\n    };\n  },\n\n  computed: {\n    shouldInvertButton () {\n      return this.$attrs.kind === 'base' || this.$attrs.kind === 'error' || this.$attrs.kind === 'info';\n    },\n\n    isInverted () {\n      return this.$attrs.important && this.shouldInvertButton;\n    },\n\n    buttonKind () {\n      return this.isInverted ? 'inverted' : 'muted';\n    },\n\n    linkClass () {\n      return this.isInverted ? 'd-link--inverted' : 'd-link--muted';\n    },\n\n    buttonCloseProps () {\n      return {\n        ...this.$attrs.closeButtonProps,\n        kind: this.$attrs.buttonKind,\n        ariaLabel: 'Close',\n      };\n    },\n  },\n};\n</script>\n","export default \"__VITE_ASSET__JV_sHRRa__\""],"names":["_sfc_main","DtNoticeIcon","DtNoticeContent","DtNoticeAction","Modal","SrOnlyCloseButtonMixin","utils","kind","NOTICE_KINDS","e","DtBanner","DtButton","DtIcon","backgroundImage"],"mappings":"ybA6DA,MAAAA,EAAA,CACA,KAAA,WAEA,WAAA,CACA,aAAAC,EACA,gBAAAC,EACA,eAAAC,CACA,EAEA,OAAA,CAAAC,EAAAC,CAAA,EAEA,MAAA,CAKA,QAAA,CACA,KAAA,OACA,SAAA,CAAA,OAAAC,EAAA,gBAAA,CAAA,CACA,EAMA,UAAA,CACA,KAAA,OACA,SAAA,CAAA,OAAAA,EAAA,gBAAA,CAAA,CACA,EAKA,MAAA,CACA,KAAA,OACA,QAAA,EACA,EAQA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EAMA,OAAA,CACA,KAAA,QACA,QAAA,EACA,EAMA,KAAA,CACA,KAAA,OACA,QAAA,OACA,SAAAC,EAAA,CACA,OAAAC,EAAA,SAAAD,CAAA,CACA,CACA,EAKA,iBAAA,CACA,KAAA,OACA,QAAA,KAAA,CAAA,EACA,EAKA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EAMA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EAKA,YAAA,CACA,KAAA,OACA,QAAA,EACA,EAKA,gBAAA,CACA,KAAA,OACA,QAAA,EACA,EAQA,eAAA,CACA,KAAA,OACA,QAAA,OACA,CACA,EAEA,MAAA,CAMA,OACA,EAEA,SAAA,CACA,MAAA,CACA,OAAA,KAAA,UAAA,cAAA,QACA,EAEA,aAAA,CASA,MAAA,CACA,WATA,CACA,MAAA,kBACA,KAAA,iBACA,QAAA,oBACA,QAAA,oBACA,KAAA,gBACA,EAIA,KAAA,IAAA,EACA,CACA,sBAAA,KAAA,UACA,mBAAA,KAAA,MACA,CACA,CACA,EAEA,uBAAA,CACA,OAAA,KAAA,kBAAA,GAAA,KAEA,yBAAA,KAAA,eAAA;AAAA,iCACA,KAAA,cAAA,GACA,CACA,EAEA,SAAA,CACA,KAAA,WACA,KAAA,kBAAA,CAEA,EAEA,QAAA,CACA,UAAAE,EAAA,CACA,KAAA,WACA,KAAA,qBAAAA,CAAA,CAEA,CACA,CACA;;;;;;;;6wBCpKA,MAAAT,EAAA,CACA,KAAA,gBAEA,WAAA,CAAA,SAAAU,EAAA,SAAAC,EAAA,OAAAC,CAAA,EAEA,MAAA,CACA,KAAA,CACA,KAAA,QACA,QAAA,EACA,CACA,EAEA,MAAA,CACA,MAAA,CACA,cAAA,KAAA,IACA,CACA,EAEA,SAAA,CACA,oBAAA,CACA,OAAA,KAAA,OAAA,OAAA,QAAA,KAAA,OAAA,OAAA,SAAA,KAAA,OAAA,OAAA,MACA,EAEA,YAAA,CACA,OAAA,KAAA,OAAA,WAAA,KAAA,kBACA,EAEA,YAAA,CACA,OAAA,KAAA,WAAA,WAAA,OACA,EAEA,WAAA,CACA,OAAA,KAAA,WAAA,mBAAA,eACA,EAEA,kBAAA,CACA,MAAA,CACA,GAAA,KAAA,OAAA,iBACA,KAAA,KAAA,OAAA,WACA,UAAA,OACA,CACA,CACA,CACA,03DCrHA,MAAeC,GAAA,GAAA,IAAA,IAAA,gCAAA,YAAA,GAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
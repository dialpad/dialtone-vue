{"version":3,"file":"notice-0d94618b.js","sources":["../../components/notice/notice_constants.js","../../components/notice/notice_icon.vue","../../components/notice/notice_content.vue","../../components/notice/notice_action.vue","../../components/notice/notice.vue"],"sourcesContent":["export const NOTICE_KINDS = ['base', 'error', 'info', 'success', 'warning'];\nexport const NOTICE_ROLES = ['alert', 'alertdialog', 'status'];\n\nexport default {\n  NOTICE_KINDS,\n  NOTICE_ROLES,\n};\n","<template>\n  <div\n    v-if=\"defaultIcon || $slots.default\"\n    aria-hidden=\"true\"\n    class=\"d-notice__icon\"\n  >\n    <!-- @slot Slot for the main content -->\n    <slot>\n      <dt-icon\n        :name=\"defaultIcon\"\n        size=\"400\"\n      />\n    </slot>\n  </div>\n</template>\n\n<script>\nimport { DtIcon } from '@/components/icon';\nimport { NOTICE_KINDS } from './notice_constants';\n\nconst kindToIcon = new Map([\n  ['info', 'info'],\n  ['success', 'check-circle'],\n  ['warning', 'alert-triangle'],\n  ['error', 'alert-circle'],\n  ['base', 'bell'],\n]);\n\nexport default {\n  name: 'DtNoticeIcon',\n\n  components: {\n    DtIcon,\n  },\n\n  props: {\n    /**\n     * Kind of icon\n     * @values base, error, info, success, warning\n     */\n    kind: {\n      type: String,\n      default: 'base',\n      validate (kind) {\n        return NOTICE_KINDS.includes(kind);\n      },\n    },\n  },\n\n  computed: {\n    defaultIcon () {\n      return kindToIcon.get(this.kind);\n    },\n  },\n};\n</script>\n","<template>\n  <div\n    class=\"d-notice__content\"\n    data-qa=\"notice-content\"\n  >\n    <p\n      v-if=\"title || $slots.titleOverride\"\n      :id=\"titleId\"\n      class=\"d-notice__title\"\n      data-qa=\"notice-content-title\"\n    >\n      <!-- @slot Slot for the title  -->\n      <slot name=\"titleOverride\">\n        {{ title }}\n      </slot>\n    </p>\n    <p\n      :id=\"contentId\"\n      class=\"d-notice__message\"\n      data-qa=\"notice-content-message\"\n    >\n      <!-- @slot Slot for main content -->\n      <slot />\n    </p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'DtNoticeContent',\n\n  props: {\n    /**\n     * Title header of the notice. This can be left blank to remove the title from the notice entirely.\n     */\n    title: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * ID for the title element of the component. Useful for aria-describedby\n     * or aria-labelledby or any other reason you may need an id to refer to the title.\n     */\n    titleId: {\n      type: String,\n      default: undefined,\n    },\n\n    /**\n     * ID for the content element of the component. Useful for aria-describedby\n     * or aria-labelledby or any other reason you may need an id to refer to the content.\n     */\n    contentId: {\n      type: String,\n      default: undefined,\n    },\n  },\n};\n</script>\n","<template>\n  <div\n    class=\"d-notice__actions\"\n    data-qa=\"notice-content-actions\"\n  >\n    <!-- @slot Slot for main content -->\n    <slot />\n    <dt-button\n      v-if=\"!hideClose\"\n      ref=\"closeButton\"\n      data-qa=\"dt-notice-action-close-button\"\n      size=\"sm\"\n      importance=\"clear\"\n      circle\n      :aria-label=\"closeButtonProps.ariaLabel ? closeButtonProps.ariaLabel : 'Close'\"\n      v-bind=\"closeButtonProps\"\n      v-on=\"noticeActionListeners\"\n    >\n      <template #icon>\n        <dt-icon\n          name=\"close\"\n          size=\"200\"\n        />\n      </template>\n    </dt-button>\n    <sr-only-close-button\n      v-if=\"showVisuallyHiddenClose\"\n      :visually-hidden-close-label=\"visuallyHiddenCloseLabel\"\n      @close=\"close\"\n    />\n  </div>\n</template>\n\n<script>\nimport { DtIcon } from '@/components/icon';\nimport { DtButton } from '@/components/button';\nimport SrOnlyCloseButtonMixin from '../../common/mixins/sr_only_close_button';\nimport SrOnlyCloseButton from '@/common/sr_only_close_button.vue';\n\nexport default {\n  name: 'DtNoticeAction',\n\n  components: {\n    DtIcon,\n    DtButton,\n    SrOnlyCloseButton,\n  },\n\n  mixins: [SrOnlyCloseButtonMixin],\n\n  props: {\n    /**\n     * Props for the notice close button.\n     */\n    closeButtonProps: {\n      type: Object,\n      default: () => ({}),\n    },\n\n    /**\n     * Hides the close button from the notice\n     * @values true, false\n     */\n    hideClose: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: [\n    /**\n     * Close button click event\n     *\n     * @event close\n     */\n    'close',\n  ],\n\n  computed: {\n    noticeActionListeners () {\n      return {\n        ...this.$listeners,\n\n        click: event => {\n          this.close();\n          this.$emit('click', event);\n        },\n      };\n    },\n  },\n\n  created () {\n    if (!this.hideClose && !this.closeButtonProps.ariaLabel) {\n      console.error('Invalid props: you must pass in closeButtonProps.ariaLabel if the close button is displayed.');\n    }\n  },\n\n  mounted () {\n    if (!this.hideClose) {\n      this.lastFocusedElement = document.activeElement;\n    }\n  },\n\n  beforeDestroy () {\n    this.lastFocusedElement?.focus();\n  },\n\n  methods: {\n    close () {\n      this.$emit('close');\n    },\n  },\n};\n</script>\n","<template>\n  <aside\n    :class=\"noticeClass\"\n    data-qa=\"notice\"\n  >\n    <dt-notice-icon\n      :kind=\"kind\"\n    >\n      <!-- @slot Slot for custom icon -->\n      <slot name=\"icon\" />\n    </dt-notice-icon>\n    <dt-notice-content\n      :title-id=\"titleId\"\n      :content-id=\"contentId\"\n      :title=\"title\"\n      :role=\"role\"\n      v-on=\"$listeners\"\n    >\n      <template #titleOverride>\n        <!-- @slot Allows you to override the title, only use this if you need\n        to override with something other than text. Otherwise use the \"title\" prop. -->\n        <slot name=\"titleOverride\" />\n      </template>\n      <!-- @slot the main textual content of the notice -->\n      <slot />\n    </dt-notice-content>\n    <dt-notice-action\n      :hide-close=\"hideClose\"\n      :close-button-props=\"closeButtonProps\"\n      :visually-hidden-close=\"visuallyHiddenClose\"\n      :visually-hidden-close-label=\"visuallyHiddenCloseLabel\"\n      v-on=\"$listeners\"\n    >\n      <!-- @slot Enter a possible action for the user to take, such as a link to another page -->\n      <slot name=\"action\" />\n    </dt-notice-action>\n  </aside>\n</template>\n\n<script>\nimport DtNoticeIcon from './notice_icon.vue';\nimport DtNoticeContent from './notice_content.vue';\nimport DtNoticeAction from './notice_action.vue';\nimport { NOTICE_KINDS, NOTICE_ROLES } from './notice_constants';\nimport SrOnlyCloseButtonMixin from '../../common/mixins/sr_only_close_button';\n\n/**\n * A notice is an informational and assistive message that appears inline with content.\n * @see https://dialpad.design/components/notice.html\n */\nexport default {\n  name: 'DtNotice',\n\n  components: {\n    DtNoticeIcon,\n    DtNoticeContent,\n    DtNoticeAction,\n  },\n\n  mixins: [SrOnlyCloseButtonMixin],\n\n  props: {\n    /**\n     * Sets an ID on the title element of the component. Useful for aria-describedby\n     * or aria-labelledby or any other reason you may need an id to refer to the title.\n     */\n    titleId: {\n      type: String,\n      default: undefined,\n    },\n\n    /**\n     * Sets an ID on the content element of the component. Useful for aria-describedby\n     * or aria-labelledby or any other reason you may need an id to refer to the content.\n     */\n    contentId: {\n      type: String,\n      default: undefined,\n    },\n\n    /**\n     * Title header of the notice. This can be left blank to remove the title from the notice entirely.\n     */\n    title: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Provides a role for the notice. 'status' is used to communicate a message. 'alert' is used to communicate an\n     * important message that does not contain any interactive elements. 'alertdialog' is used to communicate an\n     * important message that does contain interactive elements.\n     * @values alert, alertdialog, status\n     */\n    role: {\n      type: String,\n      default: 'status',\n      validate (role) {\n        return NOTICE_ROLES.includes(role);\n      },\n    },\n\n    /**\n     * Used in scenarios where the message needs to visually dominate the screen.\n     * This will also change the aria role from status to alert.\n     * @values true, false\n     */\n    important: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Severity level of the notice, sets the icon and background\n     * @values base, error, info, success, warning\n     */\n    kind: {\n      type: String,\n      default: 'base',\n      validate (kind) {\n        return NOTICE_KINDS.includes(kind);\n      },\n    },\n\n    /**\n     * Props for the notice close button.\n     */\n    closeButtonProps: {\n      type: Object,\n      default: () => ({}),\n    },\n\n    /**\n     * Hides the close button from the notice\n     * @values true, false\n     */\n    hideClose: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: [\n    /**\n     * Close button click event\n     *\n     * @event close\n     */\n    'close',\n  ],\n\n  computed: {\n    noticeClass () {\n      const noticeKinds = {\n        error: 'd-notice--error',\n        info: 'd-notice--info',\n        success: 'd-notice--success',\n        warning: 'd-notice--warning',\n        base: 'd-notice--base',\n      };\n      return [\n        'd-notice',\n        noticeKinds[this.kind],\n        { 'd-notice--important': this.important },\n      ];\n    },\n  },\n};\n</script>\n"],"names":["NOTICE_KINDS","NOTICE_ROLES","kindToIcon","_sfc_main","DtIcon","kind","DtButton","SrOnlyCloseButton","SrOnlyCloseButtonMixin","event","_a","DtNoticeIcon","DtNoticeContent","DtNoticeAction","role"],"mappings":"wMAAY,MAACA,EAAe,CAAC,OAAQ,QAAS,OAAQ,UAAW,SAAS,EAC7DC,EAAe,CAAC,QAAS,cAAe,QAAQ,ECmB7DC,EAAA,IAAA,IAAA,CACA,CAAA,OAAA,MAAA,EACA,CAAA,UAAA,cAAA,EACA,CAAA,UAAA,gBAAA,EACA,CAAA,QAAA,cAAA,EACA,CAAA,OAAA,MAAA,CACA,CAAA,EAEAC,EAAA,CACA,KAAA,eAEA,WAAA,CACA,OAAAC,CACA,EAEA,MAAA,CAKA,KAAA,CACA,KAAA,OACA,QAAA,OACA,SAAAC,EAAA,CACA,OAAAL,EAAA,SAAAK,CAAA,CACA,CACA,CACA,EAEA,SAAA,CACA,aAAA,CACA,OAAAH,EAAA,IAAA,KAAA,IAAA,CACA,CACA,CACA,m1BC1BA,MAAAC,EAAA,CACA,KAAA,kBAEA,MAAA,CAIA,MAAA,CACA,KAAA,OACA,QAAA,EACA,EAMA,QAAA,CACA,KAAA,OACA,QAAA,MACA,EAMA,UAAA,CACA,KAAA,OACA,QAAA,MACA,CACA,CACA;;2WCnBA,MAAAA,EAAA,CACA,KAAA,iBAEA,WAAA,CACA,OAAAC,EACA,SAAAE,EACA,kBAAAC,CACA,EAEA,OAAA,CAAAC,CAAA,EAEA,MAAA,CAIA,iBAAA,CACA,KAAA,OACA,QAAA,KAAA,CAAA,EACA,EAMA,UAAA,CACA,KAAA,QACA,QAAA,EACA,CACA,EAEA,MAAA,CAMA,OACA,EAEA,SAAA,CACA,uBAAA,CACA,MAAA,CACA,GAAA,KAAA,WAEA,MAAAC,GAAA,CACA,KAAA,MAAA,EACA,KAAA,MAAA,QAAAA,CAAA,CACA,CACA,CACA,CACA,EAEA,SAAA,CACA,CAAA,KAAA,WAAA,CAAA,KAAA,iBAAA,WACA,QAAA,MAAA,8FAAA,CAEA,EAEA,SAAA,CACA,KAAA,YACA,KAAA,mBAAA,SAAA,cAEA,EAEA,eAAA,QACAC,EAAA,KAAA,qBAAA,MAAAA,EAAA,OACA,EAEA,QAAA,CACA,OAAA,CACA,KAAA,MAAA,OAAA,CACA,CACA,CACA,qrEC9DA,MAAAP,EAAA,CACA,KAAA,WAEA,WAAA,CACA,aAAAQ,EACA,gBAAAC,EACA,eAAAC,CACA,EAEA,OAAA,CAAAL,CAAA,EAEA,MAAA,CAKA,QAAA,CACA,KAAA,OACA,QAAA,MACA,EAMA,UAAA,CACA,KAAA,OACA,QAAA,MACA,EAKA,MAAA,CACA,KAAA,OACA,QAAA,EACA,EAQA,KAAA,CACA,KAAA,OACA,QAAA,SACA,SAAAM,EAAA,CACA,OAAAb,EAAA,SAAAa,CAAA,CACA,CACA,EAOA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EAMA,KAAA,CACA,KAAA,OACA,QAAA,OACA,SAAAT,EAAA,CACA,OAAAL,EAAA,SAAAK,CAAA,CACA,CACA,EAKA,iBAAA,CACA,KAAA,OACA,QAAA,KAAA,CAAA,EACA,EAMA,UAAA,CACA,KAAA,QACA,QAAA,EACA,CACA,EAEA,MAAA,CAMA,OACA,EAEA,SAAA,CACA,aAAA,CAQA,MAAA,CACA,WARA,CACA,MAAA,kBACA,KAAA,iBACA,QAAA,oBACA,QAAA,oBACA,KAAA,gBACA,EAGA,KAAA,IAAA,EACA,CAAA,sBAAA,KAAA,SAAA,CACA,CACA,CACA,CACA;;;;;"}
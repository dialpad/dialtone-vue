{"version":3,"file":"collapsible-KRExwTwW.js","sources":["../../components/collapsible/collapsible_lazy_show.vue","../../components/collapsible/collapsible.vue"],"sourcesContent":["<template>\n  <!-- applies the transition on initial render -->\n  <transition\n    :appear=\"appear\"\n    enter-active-class=\"enter-active\"\n    leave-active-class=\"leave-active\"\n    v-bind=\"$attrs\"\n    :css=\"isCSSEnabled\"\n    @before-enter=\"beforeEnter\"\n    @enter=\"enter\"\n    @after-enter=\"afterEnter\"\n    @before-leave=\"beforeLeave\"\n    @leave=\"leave\"\n    @after-leave=\"afterLeave\"\n  >\n    <component\n      :is=\"elementType\"\n      v-show=\"show\"\n      v-bind=\"$attrs\"\n    >\n      <!-- @slot slot for Content within collapsible -->\n      <slot v-if=\"initialized\" />\n    </component>\n  </transition>\n</template>\n\n<script>\nexport default {\n  name: 'DtCollapsibleLazyShow',\n\n  inheritAttrs: false,\n\n  /******************\n   *     PROPS      *\n   ******************/\n  props: {\n    /**\n     * Whether the child slot is shown.\n     */\n    show: {\n      type: Boolean,\n      default: null,\n    },\n\n    /**\n     * Enable/Disable transition animation\n     */\n    appear: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * HTML element type (tag name) of the content wrapper element.\n     */\n    elementType: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  /******************\n   *      DATA      *\n   ******************/\n  data () {\n    return {\n      initialized: !!this.show,\n    };\n  },\n\n  /******************\n   *    COMPUTED    *\n   ******************/\n  computed: {\n    /**\n     * Set the css property to false when running tests only.\n     * Refer to: https://vuejs.org/guide/built-ins/transition.html#javascript-hooks for details about\n     * transition `css` property\n     * @returns {boolean}\n     */\n    isCSSEnabled () {\n      return process.env.NODE_ENV !== 'test';\n    },\n  },\n\n  /******************\n   *      WATCH     *\n   ******************/\n  watch: {\n    show: function (newValue) {\n      if (!newValue || this.initialized) return;\n\n      this.initialized = true;\n    },\n  },\n\n  methods: {\n    /**\n     * @param {HTMLElement} element\n     */\n    beforeEnter (element) {\n      requestAnimationFrame(() => {\n        if (!element.style.height) {\n          element.style.height = '0px';\n        }\n      });\n    },\n\n    /**\n     * @param {HTMLElement} element\n     */\n    enter (element) {\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          element.style.height = `${element.scrollHeight}px`;\n        });\n      });\n    },\n\n    /**\n     * @param {HTMLElement} element\n     */\n    afterEnter (element) {\n      element.style.height = null;\n    },\n\n    /**\n     * @param {HTMLElement} element\n     */\n    beforeLeave (element) {\n      requestAnimationFrame(() => {\n        if (!element.style.height) {\n          element.style.height = `${element.offsetHeight}px`;\n        }\n      });\n    },\n\n    /**\n     * @param {HTMLElement} element\n     */\n    leave (element) {\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          element.style.height = '0px';\n        });\n      });\n    },\n\n    /**\n     * @param {HTMLElement} element\n     */\n    afterLeave (element) {\n      element.style.height = null;\n    },\n  },\n};\n</script>\n\n<style>\n  .enter-active,\n  .leave-active {\n    overflow: hidden;\n    transition: height var(--td300) var(--ttf-out-quint);\n  }\n</style>\n","<template>\n  <component\n    :is=\"elementType\"\n    ref=\"collapsible\"\n    v-on=\"collapsibleListeners\"\n  >\n    <!-- Element for capturing keypress events -->\n    <div\n      :id=\"!ariaLabelledBy && labelledBy\"\n      ref=\"anchor\"\n      :class=\"anchorClass\"\n    >\n      <!-- @slot Slot for the anchor element that toggles the collapsible content -->\n      <slot\n        name=\"anchor\"\n        :attrs=\"{\n          'aria-controls': id,\n          'aria-expanded': isOpen.toString(),\n          'role': 'button',\n        }\"\n      >\n        <dt-button\n          importance=\"clear\"\n          kind=\"muted\"\n          :aria-controls=\"id\"\n          :aria-expanded=\"`${isOpen}`\"\n          :style=\"{\n            'width': maxWidth,\n          }\"\n          @click=\"defaultToggleOpen\"\n        >\n          <dt-icon\n            :name=\" isOpen ? 'chevron-down' : 'chevron-right'\"\n            class=\"d-collapsible__icon\"\n            size=\"300\"\n          />\n          <span\n            class=\"d-collapsible__anchor-text\"\n            :title=\"anchorText\"\n          >\n            {{ anchorText }}\n          </span>\n        </dt-button>\n      </slot>\n    </div>\n    <dt-collapsible-lazy-show\n      :id=\"id\"\n      ref=\"contentWrapper\"\n      :aria-hidden=\"`${!isOpen}`\"\n      :aria-labelledby=\"labelledBy\"\n      :aria-label=\"ariaLabel\"\n      :show=\"isOpen\"\n      :element-type=\"contentElementType\"\n      :class=\"contentClass\"\n      :style=\"{\n        'max-height': maxHeight,\n        'max-width': maxWidth,\n      }\"\n      data-qa=\"dt-collapsible--content\"\n      tabindex=\"-1\"\n      appear\n      v-on=\"collapsibleListeners\"\n      @after-leave=\"onLeaveTransitionComplete\"\n      @after-enter=\"onEnterTransitionComplete\"\n    >\n      <!-- @slot Slot for the collapsible element that is expanded by the anchor -->\n      <slot\n        name=\"content\"\n      />\n    </dt-collapsible-lazy-show>\n  </component>\n</template>\n\n<script>\nimport { extractVueListeners, getUniqueString, hasSlotContent } from '@/common/utils';\nimport DtCollapsibleLazyShow from './collapsible_lazy_show.vue';\nimport { DtButton } from '@/components/button';\nimport { DtLazyShow } from '@/components/lazy_show';\nimport { DtIcon } from '@/components/icon';\n\n/**\n * A collapsible is a component consisting of an interactive anchor that toggled the expandable/collapsible element.\n * @see https://dialpad.design/components/collapsible.html\n */\nexport default {\n  name: 'DtCollapsible',\n\n  components: {\n    DtButton,\n    DtCollapsibleLazyShow,\n    DtLazyShow,\n    DtIcon,\n  },\n\n  props: {\n    /**\n     * Text that is displayed on the anchor if nothing is passed in the slot.\n     * Ignored if the anchor slot is used.\n     */\n    anchorText: {\n      type: String,\n      default: null,\n    },\n\n    /**\n     * Controls whether the collapsible is shown. Leaving this null will have the collapsible start\n     * expanded and trigger on click by default. If you set this value, the default trigger\n     * behavior will be disabled, and you can control it as you need.\n     * Supports .sync modifier\n     * @values null, true, false\n     */\n    open: {\n      type: Boolean,\n      default: null,\n    },\n\n    /**\n     * The id of the content wrapper.\n     */\n    id: {\n      type: String,\n      default () { return getUniqueString(); },\n    },\n\n    /**\n     * HTML element type (tag name) of the root element of the component.\n     */\n    elementType: {\n      type: String,\n      default: 'div',\n    },\n\n    /**\n     * HTML element type (tag name) of the content wrapper element.\n     */\n    contentElementType: {\n      type: String,\n      default: 'div',\n    },\n\n    /**\n     * Additional class name for the anchor wrapper element.\n     */\n    anchorClass: {\n      type: [String, Array, Object],\n      default: null,\n    },\n\n    /**\n     * Additional class name for the content wrapper element.\n     */\n    contentClass: {\n      type: [String, Array, Object],\n      default: null,\n    },\n\n    /**\n     * The maximum width of the anchor and collapsible element.\n     * Possible units rem|px|%|em\n     */\n    maxWidth: {\n      type: String,\n      default: null,\n    },\n\n    /**\n     * The maximum height of the collapsible element.\n     * Possible units rem|px|%|em\n     */\n    maxHeight: {\n      type: String,\n      default: null,\n    },\n\n    /**\n     * Label on the collapsible content. Should provide this or ariaLabelledBy but not both.\n     */\n    ariaLabel: {\n      type: String,\n      default: null,\n    },\n\n    /**\n     * Id of the element that labels the collapsible content. Defaults to the anchor element.\n     * Should provide this or ariaLabel but not both.\n     */\n    ariaLabelledBy: {\n      type: String,\n      default: null,\n    },\n  },\n\n  emits: [\n    /**\n     * Event fired to sync the open prop with the parent component\n     * @event update:open\n     */\n    'update:open',\n\n    /**\n     * Event fired when the content is shown or hidden\n     *\n     * @event opened\n     * @type {Boolean}\n     */\n    'opened',\n  ],\n\n  data () {\n    return {\n      isOpen: true,\n    };\n  },\n\n  computed: {\n    labelledBy () {\n      // aria-labelledby should be set only if aria-labelledby is passed as a prop, or if\n      // there is no aria-label and the labelledby should point to the anchor\n      return this.ariaLabelledBy || (!this.ariaLabel && getUniqueString('DtCollapsible__anchor'));\n    },\n\n    collapsibleListeners () {\n      return extractVueListeners(this.$attrs);\n    },\n  },\n\n  watch: {\n    open: {\n      handler: function (open) {\n        if (open !== null) {\n          this.isOpen = open;\n        }\n      },\n\n      immediate: true,\n    },\n  },\n\n  created () {\n    this.validateProperAnchor();\n  },\n\n  methods: {\n    onLeaveTransitionComplete () {\n      this.$emit('opened', false);\n      if (this.open !== null) {\n        this.$emit('update:open', false);\n      }\n    },\n\n    onEnterTransitionComplete () {\n      this.$emit('opened', true, this.$refs.content);\n      if (this.open !== null) {\n        this.$emit('update:open', true);\n      }\n    },\n\n    defaultToggleOpen () {\n      if (this.open === null) {\n        this.toggleOpen();\n      }\n    },\n\n    toggleOpen () {\n      this.isOpen = !this.isOpen;\n    },\n\n    validateProperAnchor () {\n      if (!this.anchorText && !hasSlotContent(this.$slots.anchor)) {\n        console.error('anchor text and anchor slot content cannot both be falsy');\n      }\n    },\n  },\n};\n</script>\n"],"names":["_sfc_main","newValue","element","_createCommentVNode","_createVNode","_Transition","_mergeProps","$props","_ctx","$options","_createBlock","_resolveDynamicComponent","_normalizeProps","_guardReactiveProps","$data","_renderSlot","DtButton","DtCollapsibleLazyShow","DtLazyShow","DtIcon","getUniqueString","extractVueListeners","open","hasSlotContent","_toHandlers","_createElementVNode","_component_dt_button","_normalizeStyle","_component_dt_icon","_hoisted_2","_component_dt_collapsible_lazy_show"],"mappings":"uaA2BA,MAAKA,EAAU,CACb,KAAM,wBAEN,aAAc,GAKd,MAAO,CAIL,KAAM,CACJ,KAAM,QACN,QAAS,IACX,EAKA,OAAQ,CACN,KAAM,QACN,QAAS,EACX,EAKA,YAAa,CACX,KAAM,OACN,QAAS,KACX,CACF,EAKA,MAAQ,CACC,MAAA,CACL,YAAa,CAAC,CAAC,KAAK,IAAA,CAExB,EAKA,SAAU,CAOR,cAAgB,CACP,MAAA,EACT,CACF,EAKA,MAAO,CACL,KAAM,SAAUC,EAAU,CACpB,CAACA,GAAY,KAAK,cAEtB,KAAK,YAAc,GACrB,CACF,EAEA,QAAS,CAIP,YAAaC,EAAS,CACpB,sBAAsB,IAAM,CACrBA,EAAQ,MAAM,SACjBA,EAAQ,MAAM,OAAS,MACzB,CACD,CACH,EAKA,MAAOA,EAAS,CACd,sBAAsB,IAAM,CAC1B,sBAAsB,IAAM,CAC1BA,EAAQ,MAAM,OAAS,GAAGA,EAAQ,YAAY,IAAA,CAC/C,CAAA,CACF,CACH,EAKA,WAAYA,EAAS,CACnBA,EAAQ,MAAM,OAAS,IACzB,EAKA,YAAaA,EAAS,CACpB,sBAAsB,IAAM,CACrBA,EAAQ,MAAM,SACjBA,EAAQ,MAAM,OAAS,GAAGA,EAAQ,YAAY,KAChD,CACD,CACH,EAKA,MAAOA,EAAS,CACd,sBAAsB,IAAM,CAC1B,sBAAsB,IAAM,CAC1BA,EAAQ,MAAM,OAAS,KAAA,CACxB,CAAA,CACF,CACH,EAKA,WAAYA,EAAS,CACnBA,EAAQ,MAAM,OAAS,IACzB,CACF,CACF,+CA1JEC,EAAiD,4CAAA,EACjDC,EAqBaC,EArBbC,EAqBa,CApBV,OAAQC,EAAM,OACf,qBAAmB,eACnB,qBAAmB,cAAA,EACXC,EAAM,OAAA,CACb,IAAKC,EAAY,aACjB,cAAcA,EAAW,YACzB,QAAOA,EAAK,MACZ,aAAaA,EAAU,WACvB,cAAcA,EAAW,YACzB,QAAOA,EAAK,MACZ,aAAaA,EAAU,WAX1B,UAAA,EAAA,cAaE,IAOY,QAPZC,EAOYC,EANLJ,EAAW,WAAA,EAAAK,EAAAC,EAERL,EAAM,MAAA,CAAA,EAAA,WAEd,IAAkD,CAAlDL,EAAkD,6CAAA,EACtCW,EAAW,YAAvBC,EAA2BP,EAAA,OAAA,UAAA,CAAA,IAAA,CAAA,CAAA,+BAJnBD,EAAI,IAAA,CAAA,66BCmElB,MAAKP,EAAU,CACb,KAAM,gBAEN,WAAY,CACV,SAAAgB,EACA,sBAAAC,EACA,WAAAC,EACA,OAAAC,CACD,EAED,MAAO,CAKL,WAAY,CACV,KAAM,OACN,QAAS,IACV,EASD,KAAM,CACJ,KAAM,QACN,QAAS,IACV,EAKD,GAAI,CACF,KAAM,OACN,SAAW,CAAE,OAAOC,EAAe,CAAK,CACzC,EAKD,YAAa,CACX,KAAM,OACN,QAAS,KACV,EAKD,mBAAoB,CAClB,KAAM,OACN,QAAS,KACV,EAKD,YAAa,CACX,KAAM,CAAC,OAAQ,MAAO,MAAM,EAC5B,QAAS,IACV,EAKD,aAAc,CACZ,KAAM,CAAC,OAAQ,MAAO,MAAM,EAC5B,QAAS,IACV,EAMD,SAAU,CACR,KAAM,OACN,QAAS,IACV,EAMD,UAAW,CACT,KAAM,OACN,QAAS,IACV,EAKD,UAAW,CACT,KAAM,OACN,QAAS,IACV,EAMD,eAAgB,CACd,KAAM,OACN,QAAS,IACV,CACF,EAED,MAAO,CAKL,cAQA,QACD,EAED,MAAQ,CACN,MAAO,CACL,OAAQ,GAEX,EAED,SAAU,CACR,YAAc,CAGZ,OAAO,KAAK,gBAAmB,CAAC,KAAK,WAAaA,EAAgB,uBAAuB,CAC1F,EAED,sBAAwB,CACtB,OAAOC,EAAoB,KAAK,MAAM,CACvC,CACF,EAED,MAAO,CACL,KAAM,CACJ,QAAS,SAAUC,EAAM,CACnBA,IAAS,OACX,KAAK,OAASA,EAEjB,EAED,UAAW,EACZ,CACF,EAED,SAAW,CACT,KAAK,qBAAoB,CAC1B,EAED,QAAS,CACP,2BAA6B,CAC3B,KAAK,MAAM,SAAU,EAAK,EACtB,KAAK,OAAS,MAChB,KAAK,MAAM,cAAe,EAAK,CAElC,EAED,2BAA6B,CAC3B,KAAK,MAAM,SAAU,GAAM,KAAK,MAAM,OAAO,EACzC,KAAK,OAAS,MAChB,KAAK,MAAM,cAAe,EAAI,CAEjC,EAED,mBAAqB,CACf,KAAK,OAAS,MAChB,KAAK,WAAU,CAElB,EAED,YAAc,CACZ,KAAK,OAAS,CAAC,KAAK,MACrB,EAED,sBAAwB,CAClB,CAAC,KAAK,YAAc,CAACC,EAAe,KAAK,OAAO,MAAM,GACxD,QAAQ,MAAM,0DAA0D,CAE3E,CACF,CACH,gIAhREb,EAqEYC,EApELJ,EAAW,WAAA,EADlBD,EAqEY,CAnEV,IAAI,aAAa,EACjBkB,EAA2Bf,EAAD,oBAAA,CAAA,EAAA,WAE1B,IAA8C,CAA9CN,EAA8C,yCAAA,EAC9CsB,EAqCM,MAAA,CApCH,GAAE,CAAGlB,EAAc,gBAAIE,EAAU,WAClC,IAAI,SACH,QAAOF,EAAW,WAAA,IAEnBJ,EAA+E,0EAAA,EAC/EY,EA8BOP,EAAA,OAAA,SAAA,CA5BJ,MAAK,iBAA+BD,EAAE,GAA6B,gBAAAO,EAAA,OAAO,SAAQ,kBAFrF,IA8BO,CAtBLV,EAqBYsB,EAAA,CApBV,WAAW,QACX,KAAK,QACJ,gBAAenB,EAAE,GACjB,mBAAkBO,EAAM,MAAA,GACxB,MAAKa,EAAA,OAAyBpB,EAAQ,WAGtC,QAAOE,EAAiB,8BAEzB,IAIE,CAJFL,EAIEwB,EAAA,CAHC,KAAOd,EAAM,OAAA,eAAA,gBACd,MAAM,sBACN,KAAK,wBAEPW,EAKO,OAAA,CAJL,MAAM,6BACL,MAAOlB,EAAU,cAEfA,EAAU,UAAA,EAAA,EAAAsB,CAAA,yEAKrBzB,EAwB2B0B,EAxB3BxB,EAwB2B,CAvBxB,GAAIC,EAAE,GACP,IAAI,iBACH,kBAAiBO,EAAM,MAAA,GACvB,kBAAiBL,EAAU,WAC3B,aAAYF,EAAS,UACrB,KAAMO,EAAM,OACZ,eAAcP,EAAkB,mBAChC,MAAOA,EAAY,aACnB,MAAK,cAA0BA,EAAS,sBAAuBA,EAAQ,UAIxE,UAAQ,0BACR,SAAS,KACT,OAAA,EACA,EAAAiB,EAAMf,EAAoB,oBAAA,EAAA,CACzB,aAAaA,EAAyB,0BACtC,aAAaA,EAAyB,uCAEvC,IAA8E,CAA9EN,EAA8E,yEAAA,EAC9EY,EAEEP,EAAA,OAAA,SAAA;;;;;;;"}
{"version":3,"file":"storybook_utils-1ca8d93f.js","sources":["../../common/storybook_utils.js"],"sourcesContent":["import * as dialtoneIcons from '@dialpad/dialtone-icons';\nimport { pascalCaseToKebabCase } from '@/common/utils';\n\n/**\n * Will use a Vue SFC to render the template rather than a template string.\n * This is useful for more complex components that are hard to work with and\n * get messy when rendered via a template string. Will pass args and argTypes\n * into the component so it is able to be live edited with storybook controls addon.\n * @param {object} args storybook control args\n * @param {object} argTypes storybook control argument settings\n * @param {component} templateComponent vue component template for rendering to storybook.\n *                                      Note this should not be the component itself,\n *                                      but rather the usage of that component.\n * @returns {component} the template component with props and args added.\n */\nexport const createTemplateFromVueFile = (args, argTypes, templateComponent) => {\n  templateComponent.props = Object.keys(argTypes);\n  templateComponent.args = args;\n  return templateComponent;\n};\n\n/**\n * Gets the full list of icon component names from the dialtone package\n * @returns {string[]} icon component names\n */\nexport function getIconNames () {\n  return [undefined, ...Object.keys(dialtoneIcons).map(name => pascalCaseToKebabCase(name))];\n}\n\nexport const generateTemplate = (component,\n  { props = [], excludeProps = [], customProps = [], childTemplate } = {}) => {\n  if (!component) {\n    console.warn('Generate template: Please provide a component');\n    return '';\n  }\n\n  const { name, props: componentProps } = component;\n  const finalProps = props.length ? props : Object.keys(componentProps);\n  const normalizedName = name.split(/(?=[A-Z])/).join('-').toLowerCase();\n\n  const startFragment = `<${normalizedName}`;\n\n  const propFragments = finalProps\n    .filter(prop => !excludeProps.includes(prop))\n    .map(prop => `:${prop}=\"${prop}\"`);\n\n  const endFragment = childTemplate ? `>${childTemplate}</${normalizedName}>` : ' />';\n\n  return [startFragment, ...propFragments, ...customProps, endFragment].join(' ');\n};\n\nexport default {\n  generateTemplate,\n  createTemplateFromVueFile,\n  getIconNames,\n};\n"],"names":["createTemplateFromVueFile","args","argTypes","templateComponent","getIconNames","dialtoneIcons","name","pascalCaseToKebabCase","generateTemplate","component","props","excludeProps","customProps","childTemplate","componentProps","finalProps","normalizedName","startFragment","propFragments","prop","endFragment"],"mappings":"+CAeY,MAACA,EAA4B,CAACC,EAAMC,EAAUC,KACxDA,EAAkB,MAAQ,OAAO,KAAKD,CAAQ,EAC9CC,EAAkB,KAAOF,EAClBE,GAOF,SAASC,GAAgB,CAC9B,MAAO,CAAC,OAAW,GAAG,OAAO,KAAKC,CAAa,EAAE,IAAIC,GAAQC,EAAsBD,CAAI,CAAC,CAAC,CAC3F,CAEY,MAACE,EAAmB,CAACC,EAC/B,CAAE,MAAAC,EAAQ,CAAE,EAAE,aAAAC,EAAe,CAAA,EAAI,YAAAC,EAAc,CAAE,EAAE,cAAAC,CAAe,EAAG,KAAO,CAC5E,GAAI,CAACJ,EACH,eAAQ,KAAK,+CAA+C,EACrD,GAGT,KAAM,CAAE,KAAAH,EAAM,MAAOQ,CAAc,EAAKL,EAClCM,EAAaL,EAAM,OAASA,EAAQ,OAAO,KAAKI,CAAc,EAC9DE,EAAiBV,EAAK,MAAM,WAAW,EAAE,KAAK,GAAG,EAAE,cAEnDW,EAAgB,IAAID,IAEpBE,EAAgBH,EACnB,OAAOI,GAAQ,CAACR,EAAa,SAASQ,CAAI,CAAC,EAC3C,IAAIA,GAAQ,IAAIA,MAASA,IAAO,EAE7BC,EAAcP,EAAgB,IAAIA,MAAkBG,KAAoB,MAE9E,MAAO,CAACC,EAAe,GAAGC,EAAe,GAAGN,EAAaQ,CAAW,EAAE,KAAK,GAAG,CAChF"}
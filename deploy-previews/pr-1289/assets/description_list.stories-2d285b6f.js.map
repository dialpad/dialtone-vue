{"version":3,"file":"description_list.stories-2d285b6f.js","sources":["../../components/description_list/description_list_constants.js","../../components/description_list/description_list.vue","../../components/description_list/description_list_default.story.vue"],"sourcesContent":["export const DT_DESCRIPTION_LIST_DIRECTION = ['row', 'column'];\n","<!-- eslint-disable vue/require-v-for-key -->\n<template>\n  <dl :class=\"['dt-description-list', getDirectionClass]\">\n    <template\n      v-for=\"item in items\"\n    >\n      <dt\n        class=\"dt-description-list__term\"\n      >\n        {{ item.term }}\n      </dt>\n      <dd\n        class=\"dt-description-list__description\"\n      >\n        {{ item.description }}\n      </dd>\n    </template>\n  </dl>\n</template>\n\n<script>\nimport { DT_DESCRIPTION_LIST_DIRECTION } from './description_list_constants';\n\nexport default {\n  name: 'DtDescriptionList',\n\n  props: {\n    /**\n     * The direction for the list\n     * @values row, column\n     */\n    direction: {\n      type: String,\n      default: 'row',\n      validator: direction => DT_DESCRIPTION_LIST_DIRECTION.includes(direction),\n    },\n\n    /**\n     * A list of (key, value) that represent the term and the description\n     */\n    items: {\n      type: Array,\n      default: () => [],\n    },\n  },\n\n  computed: {\n    getDirectionClass () {\n      return `dt-description-list--${this.direction}`;\n    },\n  },\n};\n</script>\n\n<style lang=\"less\">\n.dt-description-list {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  gap: var(--dt-space-400);\n  flex-direction: row;\n  line-height: var(--lh2);\n  font-size: var(--dt-font-size-100);\n  &--column {\n    flex-direction: column;\n  }\n  &__term {\n    color: var(--dt-color-foreground-tertiary);\n    flex: 0 1 40%;\n  }\n  &__description {\n    color: var(--dt-color-foreground-primary);\n    flex: 1 1 50%;\n    margin-left: 0;\n  }\n}\n</style>\n","<!-- Use this template story to allow the user control the component's props and slots -->\n<template>\n  <!--\n    We can bind the data that the user entered into the storybook controls to props by using a property of the same name\n    as the storybook control defined in the corresponding `.story.js` file.\n  -->\n  <dt-description-list\n    :items=\"items\"\n    :direction=\"direction\"\n  >\n    <!--\n      We can also bind any slot data that the user has entered into the storybook controls. In this example we\n      conditionally render slots using a custom storybook control defined in the corresponding `.story.js`.\n\n      The preferred naming scheme for storybook slot controls uses the following format `<SLOT_NAME>Slot`.\n\n      We use this storybook control naming scheme to prevent conflicts between controls for props and slots with the\n      same name.\n    -->\n  </dt-description-list>\n</template>\n\n<script>\nimport DtDescriptionList from './description_list.vue';\n\nexport default {\n  name: 'DtDescriptionListDefault',\n  components: { DtDescriptionList },\n};\n</script>\n"],"names":["DT_DESCRIPTION_LIST_DIRECTION","_sfc_main","direction","DtDescriptionList"],"mappings":"4GAAO,MAAMA,EAAgC,CAAC,MAAO,QAAQ,ECuB7D,MAAAC,EAAA,CACA,KAAA,oBAEA,MAAA,CAKA,UAAA,CACA,KAAA,OACA,QAAA,MACA,UAAAC,GAAAF,EAAA,SAAAE,CAAA,CACA,EAKA,MAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,CACA,EAEA,SAAA,CACA,mBAAA,CACA,MAAA,wBAAA,KAAA,SAAA,EACA,CACA,CACA,wgCC1BA,MAAAD,EAAA,CACA,KAAA,2BACA,WAAA,CAAA,kBAAAE,CAAA,CACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
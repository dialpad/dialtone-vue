{"version":3,"file":"contact_row-b85333e4.js","sources":["../../recipes/leftbar/contact_row/contact_row.vue"],"sourcesContent":["<template>\n  <dt-recipe-general-row\n    :unread-count=\"unreadCount\"\n    :description=\"contactDescription\"\n    :has-unreads=\"hasUnreads\"\n    :selected=\"selected\"\n    :has-call-button=\"hasCallButton\"\n    :muted=\"muted\"\n    :is-typing=\"isTyping\"\n    :call-button-tooltip=\"callButtonTooltip\"\n    :unread-count-tooltip=\"unreadCountTooltip\"\n    v-bind=\"$attrs\"\n    v-on=\"contactRowListeners\"\n    @call=\"$emit('call', $event)\"\n  >\n    <template #left>\n      <dt-avatar\n        :full-name=\"name\"\n        :image-src=\"avatarSrc\"\n        :image-alt=\"avatarAlt\"\n        :icon-name=\"iconName\"\n        icon-size=\"200\"\n        size=\"sm\"\n        :seed=\"avatarSeed\"\n        :presence=\"avatarPresence\"\n      />\n    </template>\n    <template #label>\n      <dt-emoji-text-wrapper\n        class=\"dt-leftbar-row__description\"\n        data-qa=\"dt-leftbar-row-description\"\n        size=\"200\"\n      >\n        {{ name }}\n      </dt-emoji-text-wrapper>\n      <div class=\"dt-leftbar-row__status\">\n        <span\n          v-if=\"presenceText\"\n          data-qa=\"dt-leftbar-row-presence-text\"\n          :class=\"['dt-leftbar-row__meta-context', presenceColorClass]\"\n        >\n          {{ presenceText }}\n        </span>\n        <dt-emoji-text-wrapper\n          v-if=\"userStatus\"\n          size=\"100\"\n          element-type=\"span\"\n          data-qa=\"dt-leftbar-row-user-status\"\n          class=\"dt-leftbar-row__meta-custom\"\n        >\n          {{ userStatus }}\n        </dt-emoji-text-wrapper>\n      </div>\n    </template>\n  </dt-recipe-general-row>\n</template>\n\n<script>\nimport { DtRecipeGeneralRow } from '@/recipes/leftbar/general_row';\nimport DtEmojiTextWrapper from '@/components/emoji_text_wrapper/emoji_text_wrapper.vue';\nimport DtAvatar from '@/components/avatar/avatar.vue';\nimport { extractVueListeners, safeConcatStrings } from '@/common/utils';\n\nexport default {\n  name: 'DtRecipeContactRow',\n\n  components: {\n    DtAvatar,\n    DtRecipeGeneralRow,\n    DtEmojiTextWrapper,\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    /**\n     * Optional avatar image url.\n     * If not provided it will use the initial of the name.\n     */\n    avatarSrc: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Optional avatar image alt text.\n     * If not provided it will use the name.\n     */\n    avatarAlt: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Determines whether to show the presence indicator for\n     * Avatar - accepts PRESENCE_STATES values: 'busy', 'away', 'offline',\n     * or 'active'. By default, it's null and nothing is shown.\n     * defer validation to avatar component.\n     * @values null, busy, away, offline, active\n     */\n    avatarPresence: {\n      type: String,\n      default: null,\n    },\n\n    /**\n     * Avatar seed, set this to the user's ID to get the same avatar background gradient each time it is displayed.\n     */\n    avatarSeed: {\n      type: String,\n      default: null,\n    },\n\n    /**\n     * Text describing the user's presence, such as \"in a meeting\"\n     */\n    presenceText: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Name of the contact\n     */\n    name: {\n      type: String,\n      required: true,\n    },\n\n    /**\n     * Status as set by the user.\n     */\n    userStatus: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Gives a faded style to be used when muted\n     */\n    muted: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Number of unread messages\n     */\n    unreadCount: {\n      type: String,\n      default: null,\n    },\n\n    /**\n     * Styles the row with an increased font weight to convey it has unreads. This must be true to see\n     * the unread count badge.\n     */\n    hasUnreads: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Determines if the row is selected\n     */\n    selected: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Initials will never be shown. Instead it will show a \"User\" icon.\n     */\n    noInitials: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Shows an \"is typing\" animation over the avatar when true.\n     */\n    isTyping: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Whether the contact row should display a call button when hovered.\n     */\n    hasCallButton: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Text shown when the call button is hovered.\n     */\n    callButtonTooltip: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Text shown when the unread count is hovered.\n     */\n    unreadCountTooltip: {\n      type: String,\n      default: '',\n    },\n  },\n\n  emits: [\n    /**\n     * Call button clicked\n     *\n     * @event call\n     * @type {PointerEvent | KeyboardEvent}\n     */\n    'call',\n  ],\n\n  computed: {\n    presenceColorClass () {\n      switch (this.avatarPresence) {\n        case 'active':\n          return 'd-fc-success';\n        case 'busy':\n          return 'd-fc-critical';\n        case 'away':\n          return 'd-fc-warning';\n        default:\n          return undefined;\n      }\n    },\n\n    contactRowListeners () {\n      return extractVueListeners(this.$attrs);\n    },\n\n    contactDescription () {\n      return safeConcatStrings([this.name, this.presenceText, this.userStatus]);\n    },\n\n    iconName () {\n      return this.noInitials ? 'user' : null;\n    },\n  },\n};\n</script>\n"],"names":["_sfc_main","DtAvatar","DtRecipeGeneralRow","DtEmojiTextWrapper","extractVueListeners","safeConcatStrings","_hoisted_1","_openBlock","_createBlock","_component_dt_recipe_general_row","_mergeProps","$props","$options","_ctx","_toHandlers","_cache","$event","_createVNode","_component_dt_avatar","_component_dt_emoji_text_wrapper","_createElementVNode","_createElementBlock"],"mappings":"wXA+DA,MAAKA,EAAU,CACb,KAAM,qBAEN,WAAY,CACV,SAAAC,EACA,mBAAAC,EACA,mBAAAC,CACD,EAED,aAAc,GAEd,MAAO,CAKL,UAAW,CACT,KAAM,OACN,QAAS,EACV,EAMD,UAAW,CACT,KAAM,OACN,QAAS,EACV,EASD,eAAgB,CACd,KAAM,OACN,QAAS,IACV,EAKD,WAAY,CACV,KAAM,OACN,QAAS,IACV,EAKD,aAAc,CACZ,KAAM,OACN,QAAS,EACV,EAKD,KAAM,CACJ,KAAM,OACN,SAAU,EACX,EAKD,WAAY,CACV,KAAM,OACN,QAAS,EACV,EAKD,MAAO,CACL,KAAM,QACN,QAAS,EACV,EAKD,YAAa,CACX,KAAM,OACN,QAAS,IACV,EAMD,WAAY,CACV,KAAM,QACN,QAAS,EACV,EAKD,SAAU,CACR,KAAM,QACN,QAAS,EACV,EAKD,WAAY,CACV,KAAM,QACN,QAAS,EACV,EAKD,SAAU,CACR,KAAM,QACN,QAAS,EACV,EAKD,cAAe,CACb,KAAM,QACN,QAAS,EACV,EAKD,kBAAmB,CACjB,KAAM,OACN,QAAS,EACV,EAKD,mBAAoB,CAClB,KAAM,OACN,QAAS,EACV,CACF,EAED,MAAO,CAOL,MACD,EAED,SAAU,CACR,oBAAsB,CACpB,OAAQ,KAAK,eAAc,CACzB,IAAK,SACH,MAAO,eACT,IAAK,OACH,MAAO,gBACT,IAAK,OACH,MAAO,eACT,QACE,MACJ,CACD,EAED,qBAAuB,CACrB,OAAOC,EAAoB,KAAK,MAAM,CACvC,EAED,oBAAsB,CACpB,OAAOC,EAAkB,CAAC,KAAK,KAAM,KAAK,aAAc,KAAK,UAAU,CAAC,CACzE,EAED,UAAY,CACV,OAAO,KAAK,WAAa,OAAS,IACnC,CACF,CACH,EApNWC,EAAA,CAAA,MAAM,wBAAwB,2GAlCvC,OAAAC,EAAA,EAAAC,EAqDwBC,EArDxBC,EAqDwB,CApDrB,eAAcC,EAAW,YACzB,YAAaC,EAAkB,mBAC/B,cAAaD,EAAU,WACvB,SAAUA,EAAQ,SAClB,kBAAiBA,EAAa,cAC9B,MAAOA,EAAK,MACZ,YAAWA,EAAQ,SACnB,sBAAqBA,EAAiB,kBACtC,uBAAsBA,EAAkB,oBACjCE,EAAM,OACdC,EAA0BF,EAAD,mBAAA,EAAA,CACxB,OAAIG,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAAC,GAAEH,EAAK,MAAA,OAASG,CAAM,MAEhB,OACT,IASE,CATFC,EASEC,EAAA,CARC,YAAWP,EAAI,KACf,YAAWA,EAAS,UACpB,YAAWA,EAAS,UACpB,YAAWC,EAAQ,SACpB,YAAU,MACV,KAAK,KACJ,KAAMD,EAAU,WAChB,SAAUA,EAAc,8FAGlB,QACT,IAMwB,CANxBM,EAMwBE,EAAA,CALtB,MAAM,8BACN,UAAQ,6BACR,KAAK,kBAEL,IAAU,KAAPR,EAAI,IAAA,EAAA,CAAA,UAETS,EAiBM,MAjBNd,EAiBM,CAfIK,EAAY,kBADpBU,EAMO,OAAA,OAJL,UAAQ,+BACP,wCAAwCT,EAAkB,kBAAA,CAAA,KAExDD,EAAY,YAAA,EAAA,CAAA,gBAGTA,EAAU,gBADlBH,EAQwBW,EAAA,OANtB,KAAK,MACL,eAAa,OACb,UAAQ,6BACR,MAAM,0CAEN,IAAgB,KAAbR,EAAU,UAAA,EAAA,CAAA;;;;;;"}
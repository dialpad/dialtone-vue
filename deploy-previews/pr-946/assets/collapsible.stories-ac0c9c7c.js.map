{"version":3,"file":"collapsible.stories-ac0c9c7c.js","sources":["../../components/collapsible/collapsible_lazy_show.vue","../../components/collapsible/collapsible.vue","../../components/collapsible/collapsible_default.story.vue"],"sourcesContent":["<template>\n  <!-- applies the transition on initial render -->\n  <transition\n    :appear=\"appear\"\n    enter-active-class=\"enter-active\"\n    leave-active-class=\"leave-active\"\n    :css=\"isCSSEnabled\"\n    @before-enter=\"beforeEnter\"\n    @enter=\"enter\"\n    @after-enter=\"afterEnter\"\n    @before-leave=\"beforeLeave\"\n    @leave=\"leave\"\n    @after-leave=\"afterLeave\"\n    v-on=\"$listeners\"\n  >\n    <component\n      :is=\"elementType\"\n      v-show=\"show\"\n      v-on=\"$listeners\"\n    >\n      <!-- @slot slot for Content within collapsible -->\n      <slot v-if=\"initialized\" />\n    </component>\n  </transition>\n</template>\n\n<script>\nexport default {\n  name: 'DtCollapsibleLazyShow',\n\n  /******************\n   *     PROPS      *\n   ******************/\n  props: {\n    /**\n     * Whether the child slot is shown.\n     */\n    show: {\n      type: Boolean,\n      default: null,\n    },\n\n    /**\n     * Enable/Disable transition animation\n     */\n    appear: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * HTML element type (tag name) of the content wrapper element.\n     */\n    elementType: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  /******************\n   *      DATA      *\n   ******************/\n  data () {\n    return {\n      initialized: !!this.show,\n    };\n  },\n\n  /******************\n   *    COMPUTED    *\n   ******************/\n  computed: {\n    /**\n     * Set the css property to false when running tests only.\n     * Refer to: https://vuejs.org/guide/built-ins/transition.html#javascript-hooks for details about\n     * transition `css` property\n     * @returns {boolean}\n     */\n    isCSSEnabled () {\n      return process.env.NODE_ENV !== 'test';\n    },\n  },\n\n  /******************\n   *      WATCH     *\n   ******************/\n  watch: {\n    show: function (newValue) {\n      if (!newValue || this.initialized) return;\n\n      this.initialized = true;\n    },\n  },\n\n  methods: {\n    /**\n     * @param {HTMLElement} element\n     */\n    beforeEnter (element) {\n      requestAnimationFrame(() => {\n        if (!element.style.height) {\n          element.style.height = '0px';\n        }\n\n        element.style.display = null;\n      });\n    },\n\n    /**\n     * @param {HTMLElement} element\n     */\n    enter (element) {\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          element.style.height = `${element.scrollHeight}px`;\n        });\n      });\n    },\n\n    /**\n     * @param {HTMLElement} element\n     */\n    afterEnter (element) {\n      element.style.height = null;\n    },\n\n    /**\n     * @param {HTMLElement} element\n     */\n    beforeLeave (element) {\n      requestAnimationFrame(() => {\n        if (!element.style.height) {\n          element.style.height = `${element.offsetHeight}px`;\n        }\n      });\n    },\n\n    /**\n     * @param {HTMLElement} element\n     */\n    leave (element) {\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          element.style.height = '0px';\n        });\n      });\n    },\n\n    /**\n     * @param {HTMLElement} element\n     */\n    afterLeave (element) {\n      element.style.height = null;\n    },\n  },\n};\n</script>\n\n<style>\n  .enter-active,\n  .leave-active {\n    overflow: hidden;\n    transition: height var(--td300) var(--ttf-quint);\n  }\n</style>\n","<template>\n  <component\n    :is=\"elementType\"\n    ref=\"collapsible\"\n    v-on=\"$listeners\"\n  >\n    <!-- Element for capturing keypress events -->\n    <div\n      :id=\"!ariaLabelledBy && labelledBy\"\n      ref=\"anchor\"\n      :class=\"[\n        'd-dt-collapsibe__anchor',\n        anchorClass,\n      ]\"\n    >\n      <!-- @slot Slot for the anchor element that toggles the collapsible content -->\n      <slot\n        name=\"anchor\"\n        :attrs=\"{\n          'aria-controls': id,\n          'aria-expanded': isOpen.toString(),\n          'role': 'button',\n        }\"\n      >\n        <dt-button\n          importance=\"clear\"\n          kind=\"muted\"\n          :aria-controls=\"id\"\n          :aria-expanded=\"`${isOpen}`\"\n          :style=\"{\n            'width': maxWidth,\n          }\"\n          @click=\"defaultToggleOpen\"\n        >\n          <dt-icon\n            :name=\" isOpen ? 'chevron-down' : 'chevron-right'\"\n            class=\"d-icon d-icon--size-300 d-mr8 d-fl-shrink0\"\n          />\n          <span\n            class=\"d-mr-auto d-truncate\"\n            :title=\"anchorText\"\n          >\n            {{ anchorText }}\n          </span>\n        </dt-button>\n      </slot>\n    </div>\n    <dt-collapsible-lazy-show\n      :id=\"id\"\n      ref=\"contentWrapper\"\n      :aria-hidden=\"`${!isOpen}`\"\n      :aria-labelledby=\"labelledBy\"\n      :aria-label=\"ariaLabel\"\n      :show=\"isOpen\"\n      :element-type=\"contentElementType\"\n      :class=\"[\n        'd-dt-collapsible__content',\n        contentClass,\n      ]\"\n      :style=\"{\n        'max-height': maxHeight,\n        'max-width': maxWidth,\n      }\"\n      tabindex=\"-1\"\n      appear\n      v-on=\"$listeners\"\n      @after-leave=\"onLeaveTransitionComplete\"\n      @after-enter=\"onEnterTransitionComplete\"\n    >\n      <!-- @slot Slot for the collapsible element that is expanded by the anchor -->\n      <slot\n        name=\"content\"\n      />\n    </dt-collapsible-lazy-show>\n  </component>\n</template>\n\n<script>\nimport { getUniqueString } from '@/common/utils';\nimport DtCollapsibleLazyShow from './collapsible_lazy_show.vue';\nimport { DtButton } from '@/components/button';\nimport { DtLazyShow } from '@/components/lazy_show';\nimport { DtIcon } from '@/components/icon';\n\n/**\n * A collapsible is a component consisting of an interactive anchor that toggled the expandable/collapsible element.\n * @see https://dialpad.design/components/collapsible.html\n */\nexport default {\n  name: 'DtCollapsible',\n\n  components: {\n    DtButton,\n    DtCollapsibleLazyShow,\n    DtLazyShow,\n    DtIcon,\n  },\n\n  props: {\n    /**\n     * Text that is displayed on the anchor if nothing is passed in the slot.\n     * Ignored if the anchor slot is used.\n     */\n    anchorText: {\n      type: String,\n      default: null,\n    },\n\n    /**\n     * Controls whether the collapsible is shown. Leaving this null will have the collapsible start\n     * expanded and trigger on click by default. If you set this value, the default trigger\n     * behavior will be disabled, and you can control it as you need.\n     * Supports .sync modifier\n     * @values null, true, false\n     */\n    open: {\n      type: Boolean,\n      default: null,\n    },\n\n    /**\n     * The id of the content wrapper.\n     */\n    id: {\n      type: String,\n      default () { return getUniqueString(); },\n    },\n\n    /**\n     * HTML element type (tag name) of the root element of the component.\n     */\n    elementType: {\n      type: String,\n      default: 'div',\n    },\n\n    /**\n     * HTML element type (tag name) of the content wrapper element.\n     */\n    contentElementType: {\n      type: String,\n      default: 'div',\n    },\n\n    /**\n     * Additional class name for the anchor wrapper element.\n     */\n    anchorClass: {\n      type: [String, Array, Object],\n      default: null,\n    },\n\n    /**\n     * Additional class name for the content wrapper element.\n     */\n    contentClass: {\n      type: [String, Array, Object],\n      default: null,\n    },\n\n    /**\n     * The maximum width of the anchor and collapsible element.\n     * Possible units rem|px|%|em\n     */\n    maxWidth: {\n      type: String,\n      default: null,\n    },\n\n    /**\n     * The maximum height of the collapsible element.\n     * Possible units rem|px|%|em\n     */\n    maxHeight: {\n      type: String,\n      default: null,\n    },\n\n    /**\n     * Label on the collapsible content. Should provide this or ariaLabelledBy but not both.\n     */\n    ariaLabel: {\n      type: String,\n      default: null,\n    },\n\n    /**\n     * Id of the element that labels the collapsible content. Defaults to the anchor element.\n     * Should provide this or ariaLabel but not both.\n     */\n    ariaLabelledBy: {\n      type: String,\n      default: null,\n    },\n  },\n\n  emits: [\n    /**\n     * Event fired to sync the open prop with the parent component\n     * @event update:open\n     */\n    'update:open',\n\n    /**\n     * Event fired when the content is shown or hidden\n     *\n     * @event opened\n     * @type {Boolean}\n     */\n    'opened',\n  ],\n\n  data () {\n    return {\n      isOpen: true,\n    };\n  },\n\n  computed: {\n    labelledBy () {\n      // aria-labelledby should be set only if aria-labelledby is passed as a prop, or if\n      // there is no aria-label and the labelledby should point to the anchor\n      return this.ariaLabelledBy || (!this.ariaLabel && getUniqueString('DtCollapsible__anchor'));\n    },\n  },\n\n  watch: {\n    open: {\n      handler: function (open) {\n        if (open !== null) {\n          this.isOpen = open;\n        }\n      },\n\n      immediate: true,\n    },\n  },\n\n  mounted () {\n    this.validateProperAnchor();\n  },\n\n  methods: {\n    onLeaveTransitionComplete () {\n      this.$emit('opened', false);\n      if (this.open !== null) {\n        this.$emit('update:open', false);\n      }\n    },\n\n    onEnterTransitionComplete () {\n      this.$emit('opened', true, this.$refs.content);\n      if (this.open !== null) {\n        this.$emit('update:open', true);\n      }\n    },\n\n    defaultToggleOpen () {\n      if (this.open === null) {\n        this.toggleOpen();\n      }\n    },\n\n    toggleOpen () {\n      this.isOpen = !this.isOpen;\n    },\n\n    validateProperAnchor () {\n      if (!this.anchorText && !this.$scopedSlots.anchor) {\n        console.error('anchor text and anchor slot content cannot both be falsy');\n      }\n    },\n  },\n};\n</script>\n","<template>\n  <dt-collapsible\n    :id=\"id\"\n    :anchor-text=\"anchorText\"\n    :max-height=\"maxHeight\"\n    :max-width=\"maxWidth\"\n    :open=\"isOpen\"\n    :initial-focus-element=\"'first'\"\n    :element-type=\"elementType\"\n    :content-element-type=\"contentElementType\"\n    :anchor-class=\"anchorClass\"\n    :content-class=\"contentClass\"\n    :aria-label=\"ariaLabel\"\n    :aria-labelledby=\"ariaLabelledBy\"\n  >\n    <template\n      v-if=\"anchor\"\n      slot=\"anchor\"\n      slot-scope=\"{ attrs }\"\n    >\n      <div\n        v-bind=\"attrs\"\n        v-html=\"anchor\"\n      />\n    </template>\n    <template slot=\"content\">\n      <div\n        v-if=\"content\"\n        v-html=\"content\"\n      />\n      <div\n        v-else\n        class=\"d-ai-center d-fs-16\"\n      >\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam et ex risus. In id\n          pellentesque tellus. In hac habitasse platea dictumst. Suspendisse nec egestas nulla. Nam\n          fermentum nisi sit amet arcu fringilla, in porta libero volutpat. Proin ac odio egestas,\n          luctus magna a, luctus leo. Maecenas eget orci vel nibh sollicitudin maximus quis at quam.\n          Curabitur imperdiet lacus nec malesuada pharetra. Nullam leo mi, suscipit at arcu vitae,\n          vestibulum rutrum eros.\n        </p>\n        <p>\n          Mauris convallis, elit quis imperdiet aliquet, elit elit tincidunt dui, at tincidunt\n          ligula metus ac tortor. Vestibulum vehicula, nibh pulvinar consequat faucibus, turpis\n          metus tempus dui, eu facilisis risus risus at ipsum. Praesent feugiat nibh non ipsum\n          facilisis, volutpat ullamcorper dui vehicula. Nunc mollis dui porta purus tristique\n          aliquam sed at turpis. Phasellus in aliquet sem, sed consequat turpis. Suspendisse\n          potenti. Aenean vitae leo quam. Fusce ipsum nulla, egestas at eros sit amet, consectetur\n          consectetur turpis. Fusce sit amet tellus rutrum, sollicitudin ante porta, consequat\n          dolor. Quisque ut nulla iaculis, eleifend neque in, euismod massa. Sed pulvinar erat nec\n          interdum porttitor. Pellentesque interdum tincidunt nisl, nec finibus augue faucibus sit\n          amet. Morbi vestibulum rhoncus tristique. Duis at vehicula nulla. Sed hendrerit est id\n          lacus placerat cursus. Cras in lacus sit amet ligula ullamcorper vehicula vitae porttitor\n          est.\n        </p>\n      </div>\n    </template>\n  </dt-collapsible>\n</template>\n\n<script>\nimport DtCollapsible from './collapsible.vue';\n\nexport default {\n  name: 'DtCollapsibleDefaultStory',\n\n  components: {\n    DtCollapsible,\n  },\n\n  data () {\n    return {\n      isOpen: this.open,\n    };\n  },\n\n  watch: {\n    open (open) {\n      this.isOpen = open;\n    },\n  },\n};\n</script>\n"],"names":["_sfc_main","newValue","element","DtButton","DtCollapsibleLazyShow","DtLazyShow","DtIcon","getUniqueString","open","DtCollapsible"],"mappings":"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"}
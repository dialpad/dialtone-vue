{"version":3,"file":"emoji_picker.stories-fb746710.js","sources":["../../components/emoji_picker/modules/emoji_tabset.vue","../../components/emoji_picker/emoji_picker_constants.js","../../components/emoji_picker/modules/emoji_selector.vue","../../components/emoji_picker/modules/emoji_skin_selector.vue","../../components/emoji_picker/emoji_picker.vue","../../components/emoji_picker/emoji_picker_default.story.vue"],"sourcesContent":["<template>\n  <div class=\"d-emoji-picker__tabset\">\n    <dt-tab-group\n      tab-list-class=\"d-emoji-picker__tabset-list\"\n      :selected=\"selectedTab\"\n    >\n      <template #tabs>\n        <dt-tab\n          v-for=\"tab in tabs\"\n          :id=\"tab.id\"\n          :key=\"tab.id\"\n          :panel-id=\"tab.panelId\"\n          :label=\"tab.label\"\n          aria-controls=\"d-emoji-picker-list\"\n          @click.capture.stop=\"selectTabset(tab.id)\"\n        >\n          <dt-icon\n            size=\"400\"\n            :name=\"tab.icon\"\n          />\n        </dt-tab>\n      </template>\n    </dt-tab-group>\n  </div>\n</template>\n\n<script setup>\nimport DtTabGroup from '@/components/tabs/tab_group.vue';\nimport DtTab from '@/components/tabs/tab.vue';\nimport DtIcon from '@/components/icon/icon.vue';\nimport { computed, ref, toRefs, watch } from 'vue';\n\nconst props = defineProps({\n  /**\n   * Whether to show the recently used tab or not\n   * @type {Boolean}\n   * @default false\n   */\n  showRecentlyUsedTab: {\n    type: Boolean,\n    default: false,\n  },\n\n  scrollIntoTab: {\n    type: Number,\n    required: true,\n  },\n\n  isScrolling: {\n    type: Boolean,\n    default: false,\n  },\n\n  emojiFilter: {\n    type: String,\n    default: '',\n  },\n\n  /**\n   * The labels for the aria-label\n   * @type {Array}\n   * @required\n   */\n  tabsetLabels: {\n    type: Array,\n    required: true,\n  },\n});\n\nconst emits = defineEmits([\n  /**\n   * Emitted when a tab is selected\n   * @event selected-tabset\n   * @param {String} tabId - The name of the tab that was selected\n   */\n  'selected-tabset',\n]);\n\nconst TABS_DATA = [\n  { label: 'Recently used', icon: 'clock' },\n  { label: 'Smileyâ€™s and people', icon: 'satisfied' },\n  { label: 'Nature', icon: 'living-thing' },\n  { label: 'Food', icon: 'food' },\n  { label: 'Activity', icon: 'object' },\n  { label: 'Travel', icon: 'transportation' },\n  { label: 'Objects', icon: 'lightbulb' },\n  { label: 'Symbols', icon: 'heart' },\n  { label: 'Flags', icon: 'flag' },\n];\n\nconst tabs = computed(() => {\n  const tabsData = props.showRecentlyUsedTab ? TABS_DATA : TABS_DATA.slice(1);\n\n  return tabsData.map((tab, index) => ({\n    ...tab,\n    label: props.tabsetLabels[index],\n    id: (index + 1).toString(),\n    panelId: (index + 1).toString(),\n  }));\n});\n\nconst isSearching = computed(() => props.emojiFilter.length > 0);\n\nconst selectedTab = ref('1');\n\nconst { isScrolling } = toRefs(props);\n\nwatch(() => props.scrollIntoTab,\n  () => {\n    if (!isScrolling.value && !isSearching.value) {\n      selectedTab.value = (props.scrollIntoTab + 1).toString();\n    }\n  });\n\nwatch(isSearching,\n  () => {\n    if (isSearching.value) {\n      selectedTab.value = null;\n    }\n  });\n\n/**\n * We are using .capture.stop modifiers on the click event\n * because we don't want to trigger the click event of the\n * dt-tab component\n */\nfunction selectTabset (id) {\n  if (!isScrolling.value) {\n    selectedTab.value = id;\n  }\n  emits('selected-tabset', id);\n}\n</script>\n\n<style lang=\"less\">\n.d-emoji-picker{\n  &__tabset-list{\n      gap: 4px;\n\n      &::after{\n        background-color: var(--black-200) !important;\n      }\n\n      button{\n        padding: var(--space-400);\n\n        &.d-tab--selected{\n          &::after{\n            height: var(--size-200);\n          }\n        }\n    }\n  }\n}\n</style>\n","export const CDN_URL = 'https://static.dialpadcdn.com/joypixels/png/unicode/32/';\n","<template>\n  <div class=\"d-emoji-picker__selector\">\n    <div\n      id=\"d-emoji-picker-list\"\n      ref=\"listRef\"\n      class=\"d-emoji-picker__list\"\n    >\n      <p\n        v-if=\"emojiFilter\"\n        class=\"d-emoji-picker__search-label d-emoji-picker__alignment\"\n      >\n        {{ filteredEmojis.length > 0 ? searchResultsLabel : searchNoResultsLabel }}\n      </p>\n      <div\n        v-else\n        ref=\"tabCategoryRef\"\n        class=\"d-emoji-picker__category d-emoji-picker__alignment\"\n      >\n        <p>\n          {{ fixedLabel }}\n        </p>\n      </div>\n      <div\n        v-for=\"(tabLabel, index) in tabLabels\"\n        v-show=\"!emojiFilter\"\n        :key=\"index\"\n        :ref=\"tabLabel.ref\"\n        class=\"d-emoji-picker__alignment\"\n      >\n        <p\n          v-if=\"index\"\n        >\n          {{ tabLabel.label }}\n        </p>\n        <div\n          class=\"d-emoji-picker__tab\"\n        >\n          <button\n            v-for=\"emoji in (emojis[tabs[index] + skinTone] ? emojis[tabs[index] + skinTone] : emojis[tabs[index]])\"\n            :key=\"emoji.shortname\"\n            type=\"button\"\n            :aria-label=\"emoji.name\"\n            @click=\"$emit('selected-emoji', emoji)\"\n            @focusin=\"$emit('highlighted-emoji', emoji)\"\n            @focusout=\"$emit('highlighted-emoji', null)\"\n            @mouseover=\"$emit('highlighted-emoji', emoji)\"\n            @mouseleave=\"$emit('highlighted-emoji', null)\"\n          >\n            <img\n              class=\"d-icon d-icon--size-500\"\n              :alt=\"emoji.name\"\n              :aria-label=\"emoji.name\"\n              :title=\"emoji.name\"\n              :src=\"getImgSrc(emoji.unicode_character)\"\n              @error=\"handleImageError\"\n            >\n          </button>\n        </div>\n      </div>\n      <div\n        v-if=\"emojiFilter\"\n        class=\"d-emoji-picker__alignment\"\n      >\n        <div\n          class=\"d-emoji-picker__tab \"\n        >\n          <button\n            v-for=\"emoji in filteredEmojis\"\n            :key=\"emoji.shortname\"\n            type=\"button\"\n            :aria-label=\"emoji.name\"\n            @click=\"$emit('selected-emoji', emoji)\"\n            @focusin=\"$emit('highlighted-emoji', emoji)\"\n            @focusout=\"$emit('highlighted-emoji', null)\"\n            @mouseover=\"$emit('highlighted-emoji', emoji)\"\n            @mouseleave=\"$emit('highlighted-emoji', null)\"\n          >\n            <img\n              class=\"d-icon d-icon--size-500\"\n              :alt=\"emoji.name\"\n              :aria-label=\"emoji.name\"\n              :title=\"emoji.name\"\n              :src=\"`${CDN_URL + emoji.unicode_character}.png`\"\n            >\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { emojisGrouped as emojis } from '@/components/emoji_picker/emojis';\nimport { computed, onMounted, onUnmounted, ref, watch, nextTick } from 'vue';\nimport { CDN_URL } from '@/components/emoji_picker/emoji_picker_constants';\n\nconst props = defineProps({\n  /**\n   * The filter to apply to the emoji list\n   * @type {String}\n   * @default ''\n   */\n  emojiFilter: {\n    type: String,\n    default: '',\n  },\n\n  /**\n   * The skin tone to apply to the emoji list\n   * @type {String}\n   * @required\n   */\n  skinTone: {\n    type: String,\n    required: true,\n  },\n\n  /**\n   * The labels for the tabset\n   * @type {Array}\n   * @required\n   */\n  tabsetLabels: {\n    type: Array,\n    required: true,\n  },\n\n  selectedTabset: {\n    type: Object,\n    required: true,\n  },\n\n  /**\n   * The label for the search results tab\n   * @type {String}\n   * @required\n   */\n  searchResultsLabel: {\n    type: String,\n    required: true,\n  },\n\n  searchNoResultsLabel: {\n    type: String,\n    required: true,\n  },\n\n  /**\n   * The list of recently used emojis\n   * @type {Array}\n   */\n  recentlyUsedEmojis: {\n    type: Array,\n    default: () => [],\n  },\n});\n\nconst emits = defineEmits([\n  /**\n   * Emitted when the user hover over an emoji\n   * @event highlighted-emoji\n   * @param {Object} emoji - The emoji data that was hovered\n    */\n  'highlighted-emoji',\n\n  /**\n   * Emitted when the user select an emoji\n   * @event selected-emoji\n   * @param {Object} emoji - The emoji data that was selected\n    */\n  'selected-emoji',\n\n  /**\n   * Emitted when the user scroll into an emoji tab\n   * @event scroll-into-tab\n   * @param {Number} tab-index - The tab that was scrolled into\n    */\n  'scroll-into-tab',\n\n  /**\n   * Emitted when the scrollTo function starts scrolling and stops scrolling\n   * @event is-scrolling\n   * @param {Boolean} is-scrolling - Whether the user is scrolling with the scroll-to\n    */\n  'is-scrolling',\n]);\n\n/**\n * The ref for the tab category\n * This is used to display the fixed label\n */\nconst tabCategoryRef = ref(null);\n\n/**\n * The ref for the list\n * This is used to display the tabs\n */\nconst listRef = ref(null);\n\n/**\n * The ref for the tab label observer\n * This is used to update the fixed label\n */\nconst tabLabelObserver = ref(null);\n\n/**\n * The list of tabs\n * This is used to display the tabs\n */\nconst TABS_DATA = ['Recently used', 'People', 'Nature', 'Food', 'Activity', 'Travel', 'Objects', 'Symbols', 'Flags'];\n\n/**\n * The list of tab labels\n * This is used to display the tabs\n * This is a computed property because it will check if the recently used emojis list is empty\n * If it is empty, it will remove the recently used tab\n */\nconst tabLabels = computed(() => {\n  return props.recentlyUsedEmojis.length\n    ? props.tabsetLabels.map((label) => ({ label, ref: ref(null) }))\n    : props.tabsetLabels.slice(1).map((label) => ({ label, ref: ref(null) }));\n});\n\n/**\n * The label of the fixed tab\n * This is used to display the fixed label\n */\nconst fixedLabel = ref(tabLabels.value[0].label);\n\n/**\n * The list of tabs\n * This is used to display the tabs\n * This is a computed property because it will check if the recently used emojis list is empty\n * If it is empty, it will remove the recently used tab\n * The difference between this and the tab labels is that this one will set the structure of tabs\n * and the tab labels will set the labels\n */\nconst tabs = computed(() => {\n  return props.recentlyUsedEmojis.length ? TABS_DATA : TABS_DATA.slice(1);\n});\n\n/**\n * The list of current emojis that match the filter\n * This will be updated when the emojiFilter changes\n * This is used to display the search results\n * The difference between this and the current emojis list is that this one will not have the skin tone applied\n */\nconst filteredEmojis = ref([]);\n\n/**\n * The current emojis list we are displaying\n * This will be updated when the skin tone changes\n * The difference between this and the emojis list is that this one will have only the skin tone applied\n */\nconst currentEmojis = computed(() => {\n  return [\n    ...emojis[`People${props.skinTone}`],\n    ...emojis.Nature,\n    ...emojis.Food,\n    ...emojis[`Activity${props.skinTone}`],\n    ...emojis.Travel,\n    ...emojis[`Objects${props.skinTone}`],\n    ...emojis.Symbols,\n    ...emojis.Flags,\n  ];\n});\n\n/**\n * This will trigger the searchByNameAndKeywords function with debounce of 300 milliseconds\n */\nconst debouncedSearch = debounce(() => {\n  searchByNameAndKeywords();\n});\n\n/**\n * Update the current emojis list on skin tone changes\n * Also update the filtered emojis list\n * @listens skinTone\n */\nwatch(currentEmojis, () => {\n  searchByNameAndKeywords();\n}, { immediate: true });\n\n/**\n * Update the recently used emojis list on recently used emojis prop changes\n * @listens recentlyUsedEmojis\n */\nwatch(() => props.recentlyUsedEmojis,\n  () => {\n    emojis['Recently used'] = props.recentlyUsedEmojis;\n  }, { immediate: true });\n\n/**\n * Search for emojis by name and keywords\n * Will update the filtered emojis list on emojiFilter update\n * @listens emojiFilter\n */\nwatch(() => props.emojiFilter, () => {\n  resetScroll();\n  debouncedSearch();\n});\n\nwatch(\n  () => props.selectedTabset,\n  (tab) => {\n    scrollToTab(tab.tabId);\n  },\n  { deep: true },\n);\n\n/**\n * Filters an array of emoji objects based on a search string that matches both the name and keywords.\n * Will update the filtered emojis list\n */\nfunction searchByNameAndKeywords () {\n  const searchStr = props.emojiFilter.toLowerCase();\n  filteredEmojis.value = currentEmojis.value.filter(obj => {\n    const nameIncludesSearchStr = obj.name.toLowerCase().includes(searchStr);\n    const keywordsIncludeSearchStr = obj.keywords.some(keyword => keyword.toLowerCase().includes(searchStr));\n    return nameIncludesSearchStr || keywordsIncludeSearchStr;\n  });\n}\n\nfunction debounce (fn, delay = 300) {\n  let timeout;\n\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => fn(...args), delay);\n  };\n}\n\nfunction getImgSrc (emoji) {\n  return `${CDN_URL + emoji}.png`;\n}\n\n/**\n * Handle image error - We hide the entire button if the image is not found\n */\nfunction handleImageError (event) {\n  event.target.parentNode.style.display = 'none';\n}\n\n/**\n * Scroll to the selected tab\n */\nfunction scrollToTab (tabIndex) {\n  const tabLabel = tabLabels.value[tabIndex - 1];\n  const tabElement = tabLabel.ref.value[0];\n\n  nextTick(() => {\n    const container = listRef.value;\n    const offsetTop = tabIndex === '1' ? 0 : tabElement.offsetTop - 20;\n\n    /**\n     * This variable is used to check if the user is scrolling inside the emoji picker\n     * This is used to check if the user is scrolling using the scrollTo function\n     * This is useful because this flag will prevent to update the fixed label when the user is scrolling using the scrollTo function\n     */\n    let isScrolling = true;\n\n    let prevScrollTop = container.scrollTop;\n    emits('is-scrolling', true);\n\n    /**\n     * This event listener checks whether the user is scrolling up or down by comparing the current scrollTop to prevScrollTop.\n     * If the scrollToTab function is scrolling from bottom to top and has reached the desired position (scrollTop <= offsetTop),\n     * or if the scrollToTab function is scrolling from top to bottom and has passed the desired position (scrollTop >= offsetTop),\n     * then isScrolling is set to false.\n     */\n    container.addEventListener('scroll', () => {\n      if (isScrolling) {\n        const scrollTop = container.scrollTop;\n        if (\n          (prevScrollTop < scrollTop && scrollTop >= offsetTop) ||\n          (prevScrollTop > scrollTop && scrollTop <= offsetTop)\n        ) {\n          isScrolling = false;\n          emits('is-scrolling', false);\n        }\n        prevScrollTop = scrollTop;\n      }\n    });\n\n    container.scrollTop = offsetTop;\n  });\n}\n\nfunction resetScroll () {\n  const container = listRef.value;\n\n  container.scrollTop = 0;\n}\n\n/**\n * This code creates an IntersectionObserver object that monitors the intersection between\n * the root element (tabCategoryRef) and its targets (the child elements of listRef),\n * and updates the value of the fixedLabel variable accordingly.\n */\nfunction setTabLabelObserver () {\n  /**\n   * The code extracts the target element and its index from the IntersectionObserverEntry object,\n   * and checks whether the target intersects with the root and is positioned above or below it.\n   */\n  tabLabelObserver.value = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      const { target } = entry;\n      const index = parseInt(target.dataset.index);\n\n      /**\n       * If the target is positioned above the root,\n       * the code updates the value of the fixed label to the label of the previous tab, or the first tab if the current tab is the first one.\n       * If the target is positioned below the root, the code updates the value of the fixed label to the label of the current tab.\n       * If the target stops intersecting with the root and its index is 1 (the second tab),\n       * the code updates the value of the fixed label to the label of the first tab.\n       * NOTES:\n       * This last condition is needed because sometimes it is\n       * not detect the intersection between the root and the target.\n       * We also provide a 50 pixels offset to the root element in the first condition to always get the\n       * first tab if it has fewer emojis, because in some cases if you quickly scroll the observer does not detect it.\n       */\n      if (entry.isIntersecting && target.offsetTop <= tabCategoryRef.value.offsetTop + 50) {\n        fixedLabel.value = tabLabels.value[index - 1]?.label ?? tabLabels.value[0]?.label;\n        emits('scroll-into-tab', index - 1);\n      } else if (entry.boundingClientRect.bottom <= tabCategoryRef.value?.getBoundingClientRect().bottom) {\n        emits('scroll-into-tab', index);\n        fixedLabel.value = tabLabels.value[index]?.label;\n      } else if (index === 1) {\n        emits('scroll-into-tab', index);\n        fixedLabel.value = tabLabels.value[0]?.label;\n      }\n    });\n  });\n\n  /**\n   * The tabLabelObserver is set to observe the root element and all its children elements with\n   * the IntersectionObserver object, and sets their data-index attribute to their index.\n   */\n  tabLabelObserver.value.observe(tabCategoryRef.value);\n\n  Array.from(listRef.value.children).forEach((child, index) => {\n    tabLabelObserver.value.observe(child);\n    child.dataset.index = index;\n  });\n}\n\nonMounted(() => {\n  setTabLabelObserver();\n});\n\nonUnmounted(() => {\n  tabLabelObserver.value.disconnect();\n});\n</script>\n\n<style lang=\"less\" scoped>\n.d-emoji-picker{\n\n  &__selector{\n    min-height: 297px;\n\n    p{\n      margin-bottom: 4px;\n      font-size: 12px;\n      font-weight: 700;\n      letter-spacing: -0.01em;\n    }\n  }\n\n  &__category {\n    background: rgba(255, 255, 255, 0.9);\n    position: sticky;\n    top: 0;\n    padding-top: 20px;\n    width: 100%;\n  }\n\n  &__list{\n    height: 100%;\n    max-height: 297px;\n    overflow-y: auto;\n    overflow-x: hidden;\n    position: relative;\n    top: -20px;\n\n    div:not(:first-child){\n      p{\n        margin-top: 22px;\n      }\n    }\n  }\n\n  &__search-label{\n    margin-top: 20px;\n  }\n\n  &__tab{\n    width: calc(100% + 15px);\n    max-width: 340px;\n    gap: 2px;\n    display: flex;\n    flex-wrap: wrap;\n    // We use this margin left to align the emoji list with the tabset label\n    margin-left: -6px;\n\n    button{\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 50%;\n      width: 36px;\n      height: 36px;\n\n      border: none;\n      background: none;\n      cursor: pointer;\n      margin: 0;\n      padding: 0;\n      outline: none;\n\n      &:hover, &:active{\n        background: rgba(0, 0, 0, 0.1);\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <div>\n    <div\n      v-show=\"isOpen\"\n      class=\"d-emoji-picker__skin-list\"\n    >\n      <button\n        v-for=\"skin in skinList\"\n        :key=\"skin.name\"\n        :class=\"{\n          'selected': skinSelected.skinCode === skin.skinCode,\n        }\"\n        @click=\"selectSkin(skin)\"\n      >\n        <img\n          class=\"d-icon d-icon--size-500\"\n          :alt=\"skin.name\"\n          :aria-label=\"skin.name\"\n          :title=\"skin.name\"\n          :src=\"`${CDN_URL + skin.unicode_output}.png`\"\n        >\n      </button>\n    </div>\n    <div\n      v-show=\"!isOpen\"\n      class=\"d-emoji-picker__skin-selected\"\n    >\n      <dt-tooltip placement=\"top-end\">\n        {{ skinSelectorButtonTooltipLabel }}\n        <template #anchor>\n          <button\n            @click=\"isOpen = true\"\n          >\n            <img\n              class=\"d-icon d-icon--size-500\"\n              :alt=\"skinSelected.name\"\n              :aria-label=\"skinSelected.name\"\n              :title=\"skinSelected.name\"\n              :src=\"`${CDN_URL + skinSelected.unicode_output}.png`\"\n            >\n          </button>\n        </template>\n      </dt-tooltip>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watchEffect } from 'vue';\nimport { CDN_URL } from '@/components/emoji_picker/emoji_picker_constants';\nimport DtTooltip from '@/components/tooltip/tooltip.vue';\n\nconst props = defineProps({\n  /**\n   * The skin tone to apply to the emoji list\n   * @type {String}\n   * @required\n   */\n  skinTone: {\n    type: String,\n    required: true,\n  },\n\n  isHovering: {\n    type: Boolean,\n    default: false,\n  },\n\n  skinSelectorButtonTooltipLabel: {\n    type: String,\n    required: true,\n  },\n});\n\nconst emits = defineEmits([\n  /**\n   * The skin tone that was selected\n   * @event skin-tone\n   * @type {Number}\n   */\n  'skin-tone',\n]);\n\nconst skinList = [\n  {\n    name: ':wave_tone1:',\n    unicode_output: '1f44b-1f3fb',\n    skinTone: 'Light',\n    skinCode: '_tone1',\n  },\n  {\n    name: ':wave_tone2:',\n    unicode_output: '1f44b-1f3fc',\n    skinTone: 'MediumLight',\n    skinCode: '_tone2',\n  },\n  {\n    name: ':wave_tone3:',\n    unicode_output: '1f44b-1f3fd',\n    skinTone: 'Medium',\n    skinCode: '_tone3',\n  },\n  {\n    name: ':wave_tone4:',\n    unicode_output: '1f44b-1f3fe',\n    skinTone: 'MediumDark',\n    skinCode: '_tone4',\n  },\n  {\n    name: ':wave_tone5:',\n    unicode_output: '1f44b-1f3ff',\n    skinTone: 'Dark',\n    skinCode: '_tone5',\n  },\n  {\n    name: ':wave:',\n    unicode_output: '1f44b',\n    skinTone: 'Default',\n    skinCode: '',\n  },\n];\n\nconst skinSelected = ref(skinList.find((skin) => skin.skinTone === props.skinTone));\n\nconst isOpen = ref(false);\n\n/**\n * It will close the skin selector if the user is hovering over the emoji list\n */\nwatchEffect(\n  () => props.isHovering && (isOpen.value = false),\n);\n\nfunction selectSkin (skin) {\n  skinSelected.value = skin;\n  isOpen.value = false;\n  emits('skin-tone', skin.skinTone);\n}\n</script>\n\n<style lang=\"less\" scoped>\n.d-emoji-picker{\n  &__skin-list{\n    display: inline-flex;\n    border-radius: 40px;\n    background: rgba(0, 0, 0, 0.05);\n    flex-direction: row;\n    align-items: flex-start;\n    padding: 4px;\n    gap: 4px;\n\n    button{\n      border: none;\n      background: none;\n      cursor: pointer;\n      margin: 0;\n      padding: 0;\n      outline: none;\n      width: 34px;\n      height: 34px;\n\n      &:hover{\n        background: rgba(0, 0, 0, 0.1);\n        border-radius: 28px;\n      }\n\n      &.selected{\n        border: 1px solid rgba(0, 0, 0, 0.25);\n        border-radius: 28px;\n      }\n    }\n  }\n\n  &__skin-selected{\n    button{\n      border: none;\n      background: none;\n      cursor: pointer;\n      margin: 0;\n      outline: none;\n      padding: 7px;\n      display: inline-block;\n      background: rgba(0, 0, 0, 0.1);\n      border-radius: 28px;\n      width: 42px;\n      height: 42px;\n\n      &:hover{\n        background: #D2D2D2;\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"d-emoji-picker\">\n    <div class=\"d-emoji-picker--header\">\n      <emoji-tabset\n        :emoji-filter=\"searchQuery\"\n        :show-recently-used-tab=\"showRecentlyUsedTab\"\n        :scroll-into-tab=\"scrollIntoTab\"\n        :tabset-labels=\"tabSetLabels\"\n        :is-scrolling=\"isScrolling\"\n        @selected-tabset=\"scrollToSelectedTabset\"\n      />\n    </div>\n    <div class=\"d-emoji-picker--body\">\n      <emoji-search\n        v-model=\"searchQuery\"\n        :search-placeholder-label=\"searchPlaceholderLabel\"\n      />\n      <emoji-selector\n        :emoji-filter=\"searchQuery\"\n        :skin-tone=\"skinTone\"\n        :tabset-labels=\"tabSetLabels\"\n        :search-results-label=\"searchResultsLabel\"\n        :search-no-results-label=\"searchNoResultsLabel\"\n        :recently-used-emojis=\"recentlyUsedEmojis\"\n        :selected-tabset=\"selectedTabset\"\n        @scroll-into-tab=\"updateScrollIntoTab\"\n        @is-scrolling=\"updateIsScrolling\"\n        @highlighted-emoji=\"updateHighlightedEmoji\"\n        @selected-emoji=\"emits('selected-emoji', $event)\"\n      />\n    </div>\n    <div class=\"d-emoji-picker--footer\">\n      <emoji-description :emoji=\"highlightedEmoji\" />\n      <emoji-skin-selector\n        :is-hovering=\"!!highlightedEmoji\"\n        :skin-selector-button-tooltip-label=\"skinSelectorButtonTooltipLabel\"\n        :skin-tone=\"skinTone\"\n        @skin-tone=\"emits('skin-tone', $event)\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport EmojiSearch from './modules/emoji_search.vue';\nimport EmojiTabset from './modules/emoji_tabset.vue';\nimport EmojiSelector from './modules/emoji_selector.vue';\nimport EmojiSkinSelector from './modules/emoji_skin_selector.vue';\nimport EmojiDescription from './modules/emoji_description.vue';\nimport { computed, ref } from 'vue';\n\nconst props = defineProps({\n  /**\n   * The array with recently used  emoji object\n   * This list is necessary to fill the recently used tab\n   * @type {Array}\n   * @default []\n   * @example\n   * <dt-emoji-picker :recentlyUsedEmojis=\"[emojiObject, emojiObject]\" />\n   */\n  // TODO try to simplify this to achieve an array of unicode characters and not an entire emoji data object\n  recentlyUsedEmojis: {\n    type: Array,\n    default: () => ([]),\n  },\n\n  /**\n   * The placeholder text for the search input\n   * @type {String}\n   * @required\n   * @example\n   * <dt-emoji-picker :searchPlaceholderLabel=\"'Search...'\" />\n   */\n  searchPlaceholderLabel: {\n    type: String,\n    required: true,\n  },\n\n  /**\n   * The label for the search results tab\n   * @type {String}\n   * @required\n   * @example\n   * <dt-emoji-picker :searchResultsLabel=\"'Search results'\" />\n   */\n  searchResultsLabel: {\n    type: String,\n    required: true,\n  },\n\n  /**\n   * The label for the search no results\n   * @type {String}\n   * @required\n   * @example\n   * <dt-emoji-picker :searchNoResultsLabel=\"'No results'\" />\n   */\n  searchNoResultsLabel: {\n    type: String,\n    required: true,\n  },\n\n  /**\n   * The list of tabsets to show, it is necessary to be updated with the correct language\n   * It must respect the provided order.\n   * @type {Array}\n   * @required\n   * @example\n   * <dt-emoji-picker\n   *  :tabSetLabels=\"['Most recently used', 'Smileys and people', 'Nature',\n   *    'Food', 'Activity', 'Travel', 'Objects', 'Symbols', 'Flags']\" />\n   */\n  tabSetLabels: {\n    type: Array,\n    required: true,\n  },\n\n  /**\n   * The skin tone to show the emojis\n   * This prop gives the possibility to use the skin tone selected by the user previously\n   * @type {String}\n   * @default 'Default'\n   * @values 'Default', 'Light', 'MediumLight', 'Medium', 'MediumDark', 'Dark'\n   * @example\n   * <dt-emoji-picker :skinTone=\"'Default'\" />\n   */\n  skinTone: {\n    type: String,\n    default: 'Default',\n  },\n\n  /**\n   * Tooltip shown when skin selector button is hovered.\n   * @type {String}\n   * @required\n   * @example\n   * <dt-emoji-picker :skin-selector-button-tooltip-label=\"'Change default skin tone'\" />\n   */\n  skinSelectorButtonTooltipLabel: {\n    type: String,\n    required: true,\n  },\n});\n\nconst emits = defineEmits(\n  [\n    /**\n     * It will emit the selected emoji\n     * @event selected-emoji\n     * @param {Object} emoji - The selected emoji from the emoji selector\n     */\n    'selected-emoji',\n\n    /**\n     * It will emit the selected skin tone\n     * @event skin-tone\n     * @param {String} skin - The selected skin tone from the skin selector\n     */\n    'skin-tone',\n  ],\n);\n\nconst searchQuery = ref('');\nconst highlightedEmoji = ref(null);\nconst selectedTabset = ref({});\n\nconst scrollIntoTab = ref(0);\nconst isScrolling = ref(false);\n\nconst showRecentlyUsedTab = computed(() => props.recentlyUsedEmojis.length > 0);\n\n/**\n * Handle the selected tabset event\n * We're creating a new object with the same value as selectedTabset and assigning it back to selectedTabset.\n * Vue will see this as a new object and trigger the watcher in the child component.\n * Using this method, we are able to trigger the watcher in the child component even if the value being passed is the\n * same as the previous value.\n * @event selectedTabset\n * @param tabName {String} - The name of the tab that was selected\n */\nfunction scrollToSelectedTabset (tabId) {\n  searchQuery.value = '';\n  selectedTabset.value = tabId;\n  selectedTabset.value = { ...selectedTabset.value, tabId };\n}\n\nfunction updateScrollIntoTab (value) {\n  scrollIntoTab.value = value;\n}\n\nfunction updateIsScrolling (value) {\n  isScrolling.value = value;\n}\nfunction updateHighlightedEmoji (emoji) {\n  highlightedEmoji.value = emoji;\n}\n</script>\n\n<style lang=\"less\">\n.d-emoji-picker{\n  width: auto;\n  max-width: 372px;\n  height: 100%;\n  display: inline-flex;\n  flex-direction: column;\n  border-radius: 4px;\n\n  &--header{\n    padding: var(--su4) var(--su4) 0 var(--su8);\n    position: relative;\n    &::after{\n      content: '';\n      position: absolute;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      height: 1px;\n      background-color: var(--bgc-moderate) !important;\n    }\n  }\n\n  &__alignment{\n    width: auto;\n    max-width: 340px;\n    margin: 0 16px;\n  }\n\n  &--footer{\n    position: relative;\n    height: 58px;\n    top: -20px;\n    background: #F9F9F9;\n    border-top: 1px solid var(--bc-subtle);\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0 16px;\n  }\n}\n</style>\n","<template>\n  <dt-emoji-picker\n    :skin-tone=\"skinTone\"\n    :skin-selector-button-tooltip-label=\"$attrs.skinSelectorButtonTooltipLabel\"\n    :tab-set-labels=\"$attrs.tabSetLabels\"\n    :recently-used-emojis=\"$attrs.recentlyUsedEmojis\"\n    :search-results-label=\"$attrs.searchResultsLabel\"\n    :search-no-results-label=\"$attrs.searchNoResultsLabel\"\n    :search-placeholder-label=\"$attrs.searchPlaceholderLabel\"\n    @skin-tone=\"skinTone = $event\"\n    @selected-emoji=\"$attrs.selectedEmoji\"\n  />\n</template>\n\n<script setup>\nimport DtEmojiPicker from './emoji_picker.vue';\nimport { ref } from 'vue';\n\nconst skinTone = ref('Light');\n</script>\n"],"names":["TABS_DATA","tabs","computed","props","tab","index","isSearching","selectedTab","ref","isScrolling","toRefs","watch","selectTabset","id","emits","CDN_URL","tabCategoryRef","listRef","tabLabelObserver","tabLabels","label","fixedLabel","filteredEmojis","currentEmojis","emojis","debouncedSearch","debounce","searchByNameAndKeywords","resetScroll","scrollToTab","searchStr","obj","nameIncludesSearchStr","keywordsIncludeSearchStr","keyword","fn","delay","timeout","args","getImgSrc","emoji","handleImageError","event","tabIndex","tabElement","nextTick","container","offsetTop","prevScrollTop","scrollTop","setTabLabelObserver","entries","entry","target","_a","_b","_c","_d","_e","child","onMounted","onUnmounted","skinList","skinSelected","skin","isOpen","watchEffect","selectSkin","searchQuery","highlightedEmoji","selectedTabset","scrollIntoTab","showRecentlyUsedTab","scrollToSelectedTabset","tabId","updateScrollIntoTab","value","updateIsScrolling","updateHighlightedEmoji","skinTone"],"mappings":"ynEA8EMA,EAAY,CAChB,CAAE,MAAO,gBAAiB,KAAM,OAAS,EACzC,CAAE,MAAO,sBAAuB,KAAM,WAAa,EACnD,CAAE,MAAO,SAAU,KAAM,cAAgB,EACzC,CAAE,MAAO,OAAQ,KAAM,MAAQ,EAC/B,CAAE,MAAO,WAAY,KAAM,QAAU,EACrC,CAAE,MAAO,SAAU,KAAM,gBAAkB,EAC3C,CAAE,MAAO,UAAW,KAAM,WAAa,EACvC,CAAE,MAAO,UAAW,KAAM,OAAS,EACnC,CAAE,MAAO,QAAS,KAAM,MAAQ,CAClC,EAEMC,EAAOC,EAAS,KACHC,EAAM,oBAAsBH,EAAYA,EAAU,MAAM,CAAC,GAE1D,IAAI,CAACI,EAAKC,KAAW,CACnC,GAAGD,EACH,MAAOD,EAAM,aAAaE,CAAK,EAC/B,IAAKA,EAAQ,GAAG,SAAU,EAC1B,SAAUA,EAAQ,GAAG,SAAU,CAChC,EAAC,CACH,EAEKC,EAAcJ,EAAS,IAAMC,EAAM,YAAY,OAAS,CAAC,EAEzDI,EAAcC,EAAI,GAAG,EAErB,CAAE,YAAAC,CAAa,EAAGC,GAAOP,CAAK,EAEpCQ,EAAM,IAAMR,EAAM,cAChB,IAAM,CACA,CAACM,EAAY,OAAS,CAACH,EAAY,QACrCC,EAAY,OAASJ,EAAM,cAAgB,GAAG,WAEpD,CAAG,EAEHQ,EAAML,EACJ,IAAM,CACAA,EAAY,QACdC,EAAY,MAAQ,KAE1B,CAAG,EAOH,SAASK,EAAcC,EAAI,CACpBJ,EAAY,QACfF,EAAY,MAAQM,GAEtBC,EAAM,kBAAmBD,CAAE,CAC7B,mqDCnIO,MAAME,EAAU,i5BC+LjBC,EAAiBR,EAAI,IAAI,EAMzBS,EAAUT,EAAI,IAAI,EAMlBU,EAAmBV,EAAI,IAAI,EAM3BR,EAAY,CAAC,gBAAiB,SAAU,SAAU,OAAQ,WAAY,SAAU,UAAW,UAAW,OAAO,EAQ7GmB,EAAYjB,EAAS,IAClBC,EAAM,mBAAmB,OAC5BA,EAAM,aAAa,IAAKiB,IAAW,CAAE,MAAAA,EAAO,IAAKZ,EAAI,IAAI,CAAC,EAAG,EAC7DL,EAAM,aAAa,MAAM,CAAC,EAAE,IAAKiB,IAAW,CAAE,MAAAA,EAAO,IAAKZ,EAAI,IAAI,CAAC,EAAG,CAC3E,EAMKa,EAAab,EAAIW,EAAU,MAAM,CAAC,EAAE,KAAK,EAUzClB,EAAOC,EAAS,IACbC,EAAM,mBAAmB,OAASH,EAAYA,EAAU,MAAM,CAAC,CACvE,EAQKsB,EAAiBd,EAAI,CAAA,CAAE,EAOvBe,EAAgBrB,EAAS,IACtB,CACL,GAAGsB,EAAO,SAASrB,EAAM,UAAU,EACnC,GAAGqB,EAAO,OACV,GAAGA,EAAO,KACV,GAAGA,EAAO,WAAWrB,EAAM,UAAU,EACrC,GAAGqB,EAAO,OACV,GAAGA,EAAO,UAAUrB,EAAM,UAAU,EACpC,GAAGqB,EAAO,QACV,GAAGA,EAAO,KACd,CACC,EAKKC,EAAkBC,EAAS,IAAM,CACrCC,GACF,CAAC,EAODhB,EAAMY,EAAe,IAAM,CACzBI,GACF,EAAG,CAAE,UAAW,EAAI,CAAE,EAMtBhB,EAAM,IAAMR,EAAM,mBAChB,IAAM,CACJqB,EAAO,eAAe,EAAIrB,EAAM,kBACpC,EAAK,CAAE,UAAW,EAAI,CAAE,EAOxBQ,EAAM,IAAMR,EAAM,YAAa,IAAM,CACnCyB,KACAH,GACF,CAAC,EAEDd,EACE,IAAMR,EAAM,eACXC,GAAQ,CACPyB,GAAYzB,EAAI,KAAK,CACtB,EACD,CAAE,KAAM,EAAM,CAChB,EAMA,SAASuB,GAA2B,CAClC,MAAMG,EAAY3B,EAAM,YAAY,YAAW,EAC/CmB,EAAe,MAAQC,EAAc,MAAM,OAAOQ,GAAO,CACvD,MAAMC,EAAwBD,EAAI,KAAK,YAAW,EAAG,SAASD,CAAS,EACjEG,EAA2BF,EAAI,SAAS,KAAKG,GAAWA,EAAQ,YAAa,EAAC,SAASJ,CAAS,CAAC,EACvG,OAAOE,GAAyBC,CACpC,CAAG,CACH,CAEA,SAASP,EAAUS,EAAIC,EAAQ,IAAK,CAClC,IAAIC,EAEJ,MAAO,IAAIC,IAAS,CAClB,aAAaD,CAAO,EACpBA,EAAU,WAAW,IAAMF,EAAG,GAAGG,CAAI,EAAGF,CAAK,CACjD,CACA,CAEA,SAASG,EAAWC,EAAO,CACzB,MAAO,GAAGzB,EAAUyB,OACtB,CAKA,SAASC,GAAkBC,EAAO,CAChCA,EAAM,OAAO,WAAW,MAAM,QAAU,MAC1C,CAKA,SAASb,GAAac,EAAU,CAE9B,MAAMC,EADWzB,EAAU,MAAMwB,EAAW,CAAC,EACjB,IAAI,MAAM,CAAC,EAEvCE,GAAS,IAAM,CACb,MAAMC,EAAY7B,EAAQ,MACpB8B,EAAYJ,IAAa,IAAM,EAAIC,EAAW,UAAY,GAOhE,IAAInC,EAAc,GAEduC,EAAgBF,EAAU,UAC9BhC,EAAM,eAAgB,EAAI,EAQ1BgC,EAAU,iBAAiB,SAAU,IAAM,CACzC,GAAIrC,EAAa,CACf,MAAMwC,EAAYH,EAAU,WAEzBE,EAAgBC,GAAaA,GAAaF,GAC1CC,EAAgBC,GAAaA,GAAaF,KAE3CtC,EAAc,GACdK,EAAM,eAAgB,EAAK,GAE7BkC,EAAgBC,EAExB,CAAK,EAEDH,EAAU,UAAYC,CAC1B,CAAG,CACH,CAEA,SAASnB,IAAe,CACtB,MAAMkB,EAAY7B,EAAQ,MAE1B6B,EAAU,UAAY,CACxB,CAOA,SAASI,IAAuB,CAK9BhC,EAAiB,MAAQ,IAAI,qBAAqBiC,GAAW,CAC3DA,EAAQ,QAAQC,GAAS,eACvB,KAAM,CAAE,OAAAC,CAAQ,EAAGD,EACb/C,EAAQ,SAASgD,EAAO,QAAQ,KAAK,EAcvCD,EAAM,gBAAkBC,EAAO,WAAarC,EAAe,MAAM,UAAY,IAC/EK,EAAW,QAAQiC,EAAAnC,EAAU,MAAMd,EAAQ,CAAC,IAAzB,YAAAiD,EAA4B,UAASC,EAAApC,EAAU,MAAM,CAAC,IAAjB,YAAAoC,EAAoB,OAC5EzC,EAAM,kBAAmBT,EAAQ,CAAC,GACzB+C,EAAM,mBAAmB,UAAUI,EAAAxC,EAAe,QAAf,YAAAwC,EAAsB,wBAAwB,SAC1F1C,EAAM,kBAAmBT,CAAK,EAC9BgB,EAAW,OAAQoC,EAAAtC,EAAU,MAAMd,CAAK,IAArB,YAAAoD,EAAwB,OAClCpD,IAAU,IACnBS,EAAM,kBAAmBT,CAAK,EAC9BgB,EAAW,OAAQqC,EAAAvC,EAAU,MAAM,CAAC,IAAjB,YAAAuC,EAAoB,MAE/C,CAAK,CACL,CAAG,EAMDxC,EAAiB,MAAM,QAAQF,EAAe,KAAK,EAEnD,MAAM,KAAKC,EAAQ,MAAM,QAAQ,EAAE,QAAQ,CAAC0C,EAAOtD,IAAU,CAC3Da,EAAiB,MAAM,QAAQyC,CAAK,EACpCA,EAAM,QAAQ,MAAQtD,CAC1B,CAAG,CACH,CAEA,OAAAuD,GAAU,IAAM,CACdV,IACF,CAAC,EAEDW,GAAY,IAAM,CAChB3C,EAAiB,MAAM,YACzB,CAAC,grJCjXK4C,EAAW,CACf,CACE,KAAM,eACN,eAAgB,cAChB,SAAU,QACV,SAAU,QACX,EACD,CACE,KAAM,eACN,eAAgB,cAChB,SAAU,cACV,SAAU,QACX,EACD,CACE,KAAM,eACN,eAAgB,cAChB,SAAU,SACV,SAAU,QACX,EACD,CACE,KAAM,eACN,eAAgB,cAChB,SAAU,aACV,SAAU,QACX,EACD,CACE,KAAM,eACN,eAAgB,cAChB,SAAU,OACV,SAAU,QACX,EACD,CACE,KAAM,SACN,eAAgB,QAChB,SAAU,UACV,SAAU,EACX,CACH,EAEMC,EAAevD,EAAIsD,EAAS,KAAME,GAASA,EAAK,WAAa7D,EAAM,QAAQ,CAAC,EAE5E8D,EAASzD,EAAI,EAAK,EAKxB0D,GACE,IAAM/D,EAAM,aAAe8D,EAAO,MAAQ,GAC5C,EAEA,SAASE,EAAYH,EAAM,CACzBD,EAAa,MAAQC,EACrBC,EAAO,MAAQ,GACfnD,EAAM,YAAakD,EAAK,QAAQ,CAClC,4gGCyBMI,EAAc5D,EAAI,EAAE,EACpB6D,EAAmB7D,EAAI,IAAI,EAC3B8D,EAAiB9D,EAAI,CAAA,CAAE,EAEvB+D,EAAgB/D,EAAI,CAAC,EACrBC,EAAcD,EAAI,EAAK,EAEvBgE,EAAsBtE,EAAS,IAAMC,EAAM,mBAAmB,OAAS,CAAC,EAW9E,SAASsE,EAAwBC,EAAO,CACtCN,EAAY,MAAQ,GACpBE,EAAe,MAAQI,EACvBJ,EAAe,MAAQ,CAAE,GAAGA,EAAe,MAAO,MAAAI,CAAK,CACzD,CAEA,SAASC,EAAqBC,EAAO,CACnCL,EAAc,MAAQK,CACxB,CAEA,SAASC,EAAmBD,EAAO,CACjCnE,EAAY,MAAQmE,CACtB,CACA,SAASE,EAAwBtC,EAAO,CACtC6B,EAAiB,MAAQ7B,CAC3B;;;;;8/CCjLA,MAAMuC,EAAWvE,EAAI,OAAO;;;"}
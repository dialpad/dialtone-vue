{"version":3,"file":"checkbox_group.stories-4b63c3a6.js","sources":["../../components/checkbox_group/checkbox_group.vue","../../components/checkbox_group/checkbox_group_default.story.vue","../../components/checkbox_group/checkboxes_decorator.vue","../../components/checkbox_group/checkbox_group_variants.story.vue"],"sourcesContent":["<script>\nimport { warn } from 'vue';\nimport { DtInputGroup } from '../input_group';\n\n/**\n * Checkbox Groups are convenience components for a grouping of related Checkboxes.\n * While each Checkbox within the group is independent, the `v-model` on the group provides\n * a convenient interface for determining which Checkboxes within the group are checked.\n * @see https://dialpad.design/components/checkbox_group.html\n */\nexport default {\n  name: 'DtCheckboxGroup',\n\n  extends: DtInputGroup,\n\n  model: {\n    prop: 'selectedValues',\n  },\n\n  props: {\n    /**\n     * Not supported by this component, please use selectedValues\n     */\n    value: {\n      type: [],\n      default: null,\n      validator: value => {\n        if (!value) {\n          return true;\n        }\n\n        warn(\n          'Component uses selectedValues to initialize the model, value is not supported by this component',\n          this,\n        );\n\n        return false;\n      },\n    },\n\n    /**\n     * A provided list of selected values(s) for the checkbox group\n     * @model selectedValues\n     */\n    selectedValues: {\n      type: Array,\n      default () {\n        return [];\n      },\n    },\n\n    /**\n     * A data qa tag for the radio group\n     */\n    dataQaGroup: {\n      type: String,\n      default: 'checkbox-group',\n    },\n\n    /**\n     * A data qa tag for the radio group legend\n     */\n    dataQaGroupLegend: {\n      type: String,\n      default: 'checkbox-group-legend',\n    },\n\n    /**\n     * A data qa tag for the radio group messages\n     */\n    dataQaGroupMessages: {\n      type: String,\n      default: 'checkbox-group-messages',\n    },\n  },\n\n  emits: [\n    /**\n     * Native input event\n     *\n     * @event input\n     * @type {Array}\n     */\n    'input',\n  ],\n\n  data () {\n    return {\n      internalValue: this.selectedValues,\n    };\n  },\n\n  watch: {\n    selectedValues (newSelectedValues) {\n      this.internalValue = newSelectedValues;\n    },\n\n    /*\n    * watching value to support 2 way binding for slotted checkboxes.\n    * need this to pass value to slotted checkboxes if modified outside\n    * checkbox group.\n    */\n    internalValue: {\n      immediate: true,\n      handler (newInternalValue) {\n        this.provideObj.selectedValues = newInternalValue;\n      },\n    },\n  },\n\n  methods: {\n    /*\n     * provided value to support 2 way binding for slotted checkboxes.\n     * slotted checkbox will change this value and need to emit new value up.\n     */\n    setGroupValue (value, checked) {\n      if (!checked) {\n        this.internalValue = this.internalValue.filter(checkedValue => checkedValue !== value);\n      } else if (!this.internalValue.includes(value)) {\n        this.internalValue.push(value);\n      }\n\n      this.$emit('input', this.internalValue);\n    },\n\n    getMessageKey (type, index) {\n      return `checkbox-group-message-${type}-${index}-${this.id}`;\n    },\n  },\n};\n</script>\n","<template>\n  <dt-checkbox-group\n    :id=\"$attrs.id\"\n    :name=\"$attrs.name\"\n    :legend=\"$attrs.legend\"\n    :selected-values=\"$attrs.selectedValues\"\n    :disabled=\"$attrs.disabled\"\n    :messages=\"$attrs.messages\"\n    :show-messages=\"$attrs.showMessages\"\n    :legend-class=\"$attrs.legendClass\"\n    :messages-class=\"$attrs.messagesClass\"\n    :legend-child-props=\"$attrs.legendChildProps\"\n    :messages-child-props=\"$attrs.messagesChildProps\"\n    @input=\"$attrs.onInput\"\n  >\n    <slot>\n      <dt-checkbox\n        v-for=\"option in $attrs.options\"\n        :key=\"option.value\"\n        :value=\"option.value\"\n      >\n        <span>{{ option.label }}</span>\n      </dt-checkbox>\n    </slot>\n    <template\n      v-if=\"$attrs.legendSlot\"\n      #legend\n    >\n      <span v-html=\"$attrs.legendSlot\" />\n    </template>\n  </dt-checkbox-group>\n</template>\n\n<script>\nimport { DtCheckbox } from '../checkbox';\nimport DtCheckboxGroup from './checkbox_group.vue';\n\nexport default {\n  name: 'CheckboxGroupDefault',\n  components: { DtCheckbox, DtCheckboxGroup },\n};\n</script>\n","<template>\n  <div>\n    <dt-checkbox\n      v-for=\"option in options\"\n      :key=\"option.value\"\n      :value=\"option.value\"\n    >\n      <span>{{ option.label }}</span>\n    </dt-checkbox>\n  </div>\n</template>\n\n<script>\nimport { DtCheckbox } from '../checkbox';\n\nexport default {\n  name: 'CheckboxesDecorator',\n  components: { DtCheckbox },\n  created () {\n    this.options = [\n      { label: 'Apple', value: 'apple' },\n      { label: 'Banana', value: 'banana' },\n      { label: 'Other', value: 'other' },\n    ];\n  },\n};\n</script>\n","<template>\n  <div id=\"components-checkbox-group--variants-container\">\n    <!-- Default -->\n    <dt-checkbox-group\n      name=\"checkbox-group-default\"\n      aria-label=\"default\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- Default -->\n\n    <!-- With Legend -->\n    <dt-checkbox-group\n      name=\"checkbox-group-with-legend\"\n      legend=\"With Legend\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- With Legend -->\n\n    <!-- With Slotted Legend -->\n    <dt-checkbox-group name=\"checkbox-group-with-slotted-legend\">\n      <dt-checkboxes-decorator />\n      <template #legend>\n        With Slotted Legend\n      </template>\n    </dt-checkbox-group>\n    <!-- With Slotted Legend -->\n\n    <!-- With Selected Values -->\n    <dt-checkbox-group\n      name=\"checkbox-group-with-selected-values\"\n      legend=\"With Selected Values\"\n      :selected-values=\"['apple', 'other']\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- With Selected Values -->\n\n    <!-- Disabled -->\n    <dt-checkbox-group\n      name=\"checkbox-group-disabled\"\n      legend=\"Disabled\"\n      disabled\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- Disabled -->\n\n    <!-- With Success Message -->\n    <dt-checkbox-group\n      name=\"checkbox-group-with-success-message\"\n      legend=\"With Success Message\"\n      :messages=\"[{ message: 'Success', type: VALIDATION_MESSAGE_TYPES.SUCCESS }]\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- With Success Message -->\n\n    <!-- With Warning Message -->\n    <dt-checkbox-group\n      name=\"checkbox-group-with-warning-message\"\n      legend=\"With Warning Message\"\n      :messages=\"[{ message: 'Warning', type: VALIDATION_MESSAGE_TYPES.WARNING }]\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- With Warning Message -->\n\n    <!-- With Error Message -->\n    <dt-checkbox-group\n      name=\"checkbox-group-with-error-message\"\n      legend=\"With Error Message\"\n      :messages=\"[{ message: 'Error', type: VALIDATION_MESSAGE_TYPES.ERROR }]\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- With Error Message -->\n\n    <!-- With Error Messages Hidden -->\n    <dt-checkbox-group\n      name=\"checkbox-group-with-error-messages-hidden\"\n      legend=\"With Error Messages Hidden\"\n      :messages=\"[{ message: 'Error', type: VALIDATION_MESSAGE_TYPES.ERROR }]\"\n      :show-messages=\"false\"\n    >\n      <dt-checkboxes-decorator />\n    </dt-checkbox-group>\n    <!-- With Error Messages Hidden -->\n  </div>\n</template>\n\n<script>\nimport { VALIDATION_MESSAGE_TYPES } from '@/common/constants';\nimport DtCheckboxesDecorator from './checkboxes_decorator.vue';\nimport DtCheckboxGroup from './checkbox_group.vue';\n\nexport default {\n  name: 'CheckboxGroupVariants',\n  components: { DtCheckboxesDecorator, DtCheckboxGroup },\n  created () {\n    this.VALIDATION_MESSAGE_TYPES = VALIDATION_MESSAGE_TYPES;\n  },\n};\n</script>\n"],"names":["_sfc_main","DtInputGroup","value","warn","this","newSelectedValues","newInternalValue","checked","checkedValue","type","index","DtCheckbox","DtCheckboxGroup","_createBlock","_component_dt_checkbox_group","_ctx","_renderSlot","_openBlock","_createElementBlock","_Fragment","_renderList","option","_component_dt_checkbox","_createElementVNode","_toDisplayString","DtCheckboxesDecorator","VALIDATION_MESSAGE_TYPES","_hoisted_1","_createCommentVNode","_createVNode","_component_dt_checkboxes_decorator"],"mappings":"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"}
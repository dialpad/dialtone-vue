{"version":3,"file":"stack-ddd639bc.js","sources":["../../components/stack/utils.js","../../components/stack/validators.js","../../components/stack/stack.vue"],"sourcesContent":["import { DT_STACK_DIRECTION, DT_STACK_GAP, DT_STACK_RESPONSIVE_BREAKPOINTS } from '@/components/stack/stack_constants';\n\nfunction _isDefaultDirection (direction) {\n  return direction === DT_STACK_DIRECTION.default;\n}\n\nfunction _getValidDirection (direction) {\n  if (directionPropType(direction) === 'string') {\n    return !_isDefaultDirection(direction) ? DT_STACK_DIRECTION[direction] : null;\n  } else if (directionPropType(direction) === 'object') {\n    const { default: defaultStyle } = direction;\n\n    return !_isDefaultDirection(defaultStyle) ? DT_STACK_DIRECTION[defaultStyle] : null;\n  } else { return null; }\n}\n\nexport function directionPropType (value) {\n  return typeof value;\n}\n\nexport function getDefaultDirectionClass (direction) {\n  return _getValidDirection(direction)\n    ? `d-stack--${DT_STACK_DIRECTION[_getValidDirection(direction)]}`\n    : null;\n}\n\nexport function getResponsiveClasses (direction) {\n  if (directionPropType(direction) === 'object') {\n    return [\n      ...DT_STACK_RESPONSIVE_BREAKPOINTS.map((breakpoint) => {\n        return direction[breakpoint]\n          ? `d-stack--${breakpoint}--${direction[breakpoint]}`\n          : null;\n      })];\n  } else { return null; }\n}\n\nexport function getGapClass (gap) {\n  return DT_STACK_GAP.includes(gap) ? `d-stack--gap-${gap}` : null;\n}\n","import { DT_STACK_DIRECTION, DT_STACK_GAP } from '@/components/stack/stack_constants';\nimport { directionPropType } from './utils';\n\nexport function directionValidator (direction) {\n  if (directionPropType(direction) === 'string') {\n    return Object.keys(DT_STACK_DIRECTION).includes(direction);\n  } else if (directionPropType(direction) === 'object') {\n    const { default: defaultStyle } = direction;\n\n    return Object.keys(DT_STACK_DIRECTION).includes(defaultStyle);\n  } else { return null; }\n}\n\nexport function gapValidator (gap) {\n  return DT_STACK_GAP.includes(gap);\n}\n","<template>\n  <component\n    :is=\"as\"\n    :class=\"[\n      'd-stack',\n      defaultDirection,\n      stackResponsive,\n      stackGap,\n    ]\"\n  >\n    <!-- @slot Slot for main content -->\n    <slot />\n  </component>\n</template>\n\n<script>\nimport { DT_STACK_DIRECTION, DT_STACK_GAP, DT_STACK_RESPONSIVE_BREAKPOINTS } from './stack_constants';\nimport { directionValidator, gapValidator } from './validators';\nimport { getDefaultDirectionClass, getResponsiveClasses, getGapClass } from './utils';\n\nexport default {\n  name: 'DtStack',\n\n  props: {\n    /**\n     * Set this prop to the direction to stack the items.\n     * You can override the default direction with 'default' key.\n     * All the undefined breakpoints will have 'default' value.\n     * By default, for the column direction it will have `justify-content: flex-start`\n     * and for the row direction `align-items: center`. This can be overriden\n     * by utility classes.\n     */\n    direction: {\n      type: [String, Object],\n      default: 'column',\n      validator: (direction) => directionValidator(direction),\n    },\n\n    /**\n     * Set this prop to render stack as a specific HTML element.\n     */\n    as: {\n      type: String,\n      default: 'div',\n    },\n\n    /**\n     * Set this prop to have the space between each stack item\n     * @values 0, 100, 200, 300, 400, 500, 600\n     */\n    gap: {\n      type: String,\n      default: '0',\n      validator: (gap) => gapValidator(gap),\n    },\n  },\n\n  data () {\n    return {\n      DT_STACK_DIRECTION,\n      DT_STACK_GAP,\n      DT_STACK_RESPONSIVE_BREAKPOINTS,\n    };\n  },\n\n  computed: {\n    stackGap () {\n      return getGapClass(this.gap);\n    },\n\n    defaultDirection () {\n      return getDefaultDirectionClass(this.direction);\n    },\n\n    stackResponsive () {\n      return getResponsiveClasses(this.direction);\n    },\n  },\n};\n</script>\n"],"names":["_isDefaultDirection","direction","DT_STACK_DIRECTION","_getValidDirection","directionPropType","defaultStyle","value","getDefaultDirectionClass","getResponsiveClasses","DT_STACK_RESPONSIVE_BREAKPOINTS","breakpoint","getGapClass","gap","DT_STACK_GAP","directionValidator","gapValidator","_sfc_main","_openBlock","_createBlock","_resolveDynamicComponent","$props","_normalizeClass","$options","_renderSlot","_ctx"],"mappings":"4MAEA,SAASA,EAAqBC,EAAW,CACvC,OAAOA,IAAcC,EAAmB,OAC1C,CAEA,SAASC,EAAoBF,EAAW,CACtC,GAAIG,EAAkBH,CAAS,IAAM,SACnC,OAAQD,EAAoBC,CAAS,EAAoC,KAAhCC,EAAmBD,CAAS,EAChE,GAAIG,EAAkBH,CAAS,IAAM,SAAU,CACpD,KAAM,CAAE,QAASI,CAAc,EAAGJ,EAElC,OAAQD,EAAoBK,CAAY,EAAuC,KAAnCH,EAAmBG,CAAY,CAC/E,KAAW,QAAO,IAClB,CAEO,SAASD,EAAmBE,EAAO,CACxC,OAAO,OAAOA,CAChB,CAEO,SAASC,EAA0BN,EAAW,CACnD,OAAOE,EAAmBF,CAAS,EAC/B,YAAYC,EAAmBC,EAAmBF,CAAS,CAAC,CAAC,GAC7D,IACN,CAEO,SAASO,EAAsBP,EAAW,CAC/C,OAAIG,EAAkBH,CAAS,IAAM,SAC5B,CACL,GAAGQ,EAAgC,IAAKC,GAC/BT,EAAUS,CAAU,EACvB,YAAYA,CAAU,KAAKT,EAAUS,CAAU,CAAC,GAChD,IACL,CAAC,EACU,IAClB,CAEO,SAASC,EAAaC,EAAK,CAChC,OAAOC,EAAa,SAASD,CAAG,EAAI,gBAAgBA,CAAG,GAAK,IAC9D,CCpCO,SAASE,EAAoBb,EAAW,CAC7C,GAAIG,EAAkBH,CAAS,IAAM,SACnC,OAAO,OAAO,KAAKC,CAAkB,EAAE,SAASD,CAAS,EACpD,GAAIG,EAAkBH,CAAS,IAAM,SAAU,CACpD,KAAM,CAAE,QAASI,CAAc,EAAGJ,EAElC,OAAO,OAAO,KAAKC,CAAkB,EAAE,SAASG,CAAY,CAChE,KAAW,QAAO,IAClB,CAEO,SAASU,EAAcH,EAAK,CACjC,OAAOC,EAAa,SAASD,CAAG,CAClC,CCKA,MAAKI,EAAU,CACb,KAAM,UAEN,MAAO,CASL,UAAW,CACT,KAAM,CAAC,OAAQ,MAAM,EACrB,QAAS,SACT,UAAYf,GAAca,EAAmBb,CAAS,CACvD,EAKD,GAAI,CACF,KAAM,OACN,QAAS,KACV,EAMD,IAAK,CACH,KAAM,OACN,QAAS,IACT,UAAYW,GAAQG,EAAaH,CAAG,CACrC,CACF,EAED,MAAQ,CACN,MAAO,CACL,mBAAAV,EACA,aAAAW,EACA,gCAAAJ,EAEH,EAED,SAAU,CACR,UAAY,CACV,OAAOE,EAAY,KAAK,GAAG,CAC5B,EAED,kBAAoB,CAClB,OAAOJ,EAAyB,KAAK,SAAS,CAC/C,EAED,iBAAmB,CACjB,OAAOC,EAAqB,KAAK,SAAS,CAC3C,CACF,CACH,0BA7EE,OAAAS,EAAA,EAAAC,EAWYC,EAVLC,EAAE,EAAA,EAAA,CACN,MAAKC,EAAA,WAA2BC,EAAgB,iBAAQA,EAAe,gBAAQA,EAAQ,uBAQxF,IAAQ,CAARC,EAAQC,EAAA,OAAA,SAAA;;;;;"}
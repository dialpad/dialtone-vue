{"version":3,"file":"keyboard_shortcut-25c93d97.js","sources":["../../components/keyboard_shortcut/keyboard_shortcut_constants.js","../../components/keyboard_shortcut/keyboard_shortcut.vue"],"sourcesContent":["export const SHORTCUTS_ICON_ALIASES = {\n  '{win}': 'layout-grid',\n  '{arrow-right}': 'arrow-right',\n  '{arrow-left}': 'arrow-left',\n  '{arrow-up}': 'arrow-up',\n  '{arrow-down}': 'arrow-down',\n  '{cmd}': 'command',\n};\n\nexport const SHORTCUTS_ICON_SEPARATOR = {\n  '{plus}': 'plus',\n};\n\nexport const SHORTCUTS_ALIASES_LIST = Object.keys(SHORTCUTS_ICON_ALIASES);\n","<!-- eslint-disable vue/no-v-html -->\n<template>\n  <kbd\n    :class=\"[\n      'd-d-inline-flex',\n      'd-ff-custom',\n      'd-ai-center',\n      'd-jc-center',\n      'd-box-border',\n      'd-px4',\n      'd-ba',\n      'd-bar4',\n      'd-fs-100',\n      inverted ? 'd-bc-moderate-inverted' : 'd-bc-default',\n    ]\"\n  >\n    <span\n      v-if=\"screenReaderText\"\n      class=\"sr-only\"\n    >\n      {{ screenReaderText }}\n    </span>\n    <template\n      v-for=\"(item, i) in formattedShortcutSplit\"\n    >\n      <dt-icon\n        v-if=\"icons[item]\"\n        :key=\"`${i}-${item}`\"\n        :name=\"icons[item]\"\n        size=\"100\"\n        aria-hidden=\"true\"\n        :class=\"[\n          inverted ? 'd-fc-secondary-inverted' : 'd-fc-tertiary',\n          'd-mr2',\n        ]\"\n      />\n      <span\n        v-else\n        :key=\"`${i}-${item}`\"\n        aria-hidden=\"true\"\n        :class=\"[\n          inverted ? 'd-fc-secondary-inverted' : 'd-fc-tertiary',\n          'd-mr2',\n        ]\"\n        v-html=\"item\"\n      />\n    </template>\n  </kbd>\n</template>\n\n<script>\nimport { DtIcon } from '@/components/icon';\nimport { SHORTCUTS_ICON_ALIASES, SHORTCUTS_ICON_SEPARATOR } from './keyboard_shortcut_constants';\n\n/**\n * This component displays a visual representation of a keyboard shortcut to the user.\n * @see https://dialpad.design/components/keyboard_shortcut.html\n */\nexport default {\n  name: 'DtKeyboardShortcut',\n\n  components: {\n    DtIcon,\n  },\n\n  props: {\n    /**\n     * If true, applies inverted styles.\n     * @values true, false\n     */\n    inverted: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Include any of these tokens in your string to render the corresponding symbol:\n     * {cmd} {win} {arrow-right} {arrow-left} {arrow-up} {arrow-down}\n     */\n    shortcut: {\n      type: String,\n      required: true,\n    },\n\n    /**\n     * Text entered here will be read by assistive technology. If null this component will be ignored by AT.\n     */\n    screenReaderText: {\n      type: String,\n      default: null,\n    },\n  },\n\n  data () {\n    return {\n      SHORTCUTS_ICON_ALIASES,\n      separator: /\\+/gi,\n    };\n  },\n\n  computed: {\n    icons () {\n      return { ...SHORTCUTS_ICON_ALIASES, ...SHORTCUTS_ICON_SEPARATOR };\n    },\n\n    shortcutWithSeparator () {\n      return this.shortcut.replace(this.separator, '{plus}');\n    },\n\n    formattedShortcut () {\n      return Object.keys(SHORTCUTS_ICON_ALIASES).reduce((result, key) => {\n        return result.replace(new RegExp('{' + key + '}', 'gi'), SHORTCUTS_ICON_ALIASES[key]);\n      }, this.shortcutWithSeparator);\n    },\n\n    // Splits any icon based aliases into their own array items.\n    formattedShortcutSplit () {\n      const iconAliasString = Object.keys(this.icons).join('|');\n\n      /*\n         The regexp splits a given string with icon alias and is filtered by empty strings after:\n         if {win} is our delimiter AKA shortcut icon alias\n         '{win} + D K + {win}' returned value will be [{win}, ' ', '{plus}', ' D K ', '{plus}', ' ', {win}]\n      */\n      const regex = new RegExp(`(${iconAliasString})`, 'gi');\n      return this.formattedShortcut.split(regex).filter(Boolean);\n    },\n  },\n};\n</script>\n"],"names":["SHORTCUTS_ICON_ALIASES","SHORTCUTS_ICON_SEPARATOR","SHORTCUTS_ALIASES_LIST","_sfc_main","DtIcon","result","key","iconAliasString","regex","_createElementBlock","_normalizeClass","$props","_hoisted_1","_toDisplayString","_openBlock","_Fragment","_renderList","$options","item","_createBlock","_component_dt_icon"],"mappings":"6MAAO,MAAMA,EAAyB,CACpC,QAAS,cACT,gBAAiB,cACjB,eAAgB,aAChB,aAAc,WACd,eAAgB,aAChB,QAAS,SACX,EAEaC,EAA2B,CACtC,SAAU,MACZ,EAEaC,EAAyB,OAAO,KAAKF,CAAsB,EC6CnEG,EAAU,CACb,KAAM,qBAEN,WAAY,CACV,OAAAC,CACD,EAED,MAAO,CAKL,SAAU,CACR,KAAM,QACN,QAAS,EACV,EAMD,SAAU,CACR,KAAM,OACN,SAAU,EACX,EAKD,iBAAkB,CAChB,KAAM,OACN,QAAS,IACV,CACF,EAED,MAAQ,CACN,MAAO,CACL,uBAAAJ,EACA,UAAW,OAEd,EAED,SAAU,CACR,OAAS,CACP,MAAO,CAAE,GAAGA,EAAwB,GAAGC,EACxC,EAED,uBAAyB,CACvB,OAAO,KAAK,SAAS,QAAQ,KAAK,UAAW,QAAQ,CACtD,EAED,mBAAqB,CACnB,OAAO,OAAO,KAAKD,CAAsB,EAAE,OAAO,CAACK,EAAQC,IAClDD,EAAO,QAAQ,IAAI,OAAO,IAAMC,EAAM,IAAK,IAAI,EAAGN,EAAuBM,CAAG,CAAC,EACnF,KAAK,qBAAqB,CAC9B,EAGD,wBAA0B,CACxB,MAAMC,EAAkB,OAAO,KAAK,KAAK,KAAK,EAAE,KAAK,GAAG,EAOlDC,EAAQ,IAAI,OAAO,IAAID,CAAe,IAAK,IAAI,EACrD,OAAO,KAAK,kBAAkB,MAAMC,CAAK,EAAE,OAAO,OAAO,CAC1D,CACF,CACH,WA9GM,MAAM,mFAhBVC,EA6CM,MAAA,CA5CH,MAAKC,EAAA,+GAAuLC,EAAQ,SAAA,yBAAA,mBAc7LA,EAAgB,sBADxBF,EAKO,OALPG,EAKOC,EADFF,EAAgB,gBAAA,EAAA,CAAA,aAErBG,EAAA,EAAA,EAAAL,EAwBWM,EAvBW,KAAAC,EAAAC,EAAA,uBAAZ,CAAAC,EAAM,mBAGND,EAAA,MAAMC,CAAI,OADlBC,EAUEC,EAAA,CARC,IAAG,GAAK,CAAC,IAAIF,CAAI,GACjB,KAAMD,EAAK,MAACC,CAAI,EACjB,KAAK,MACL,cAAY,OACX,MAAKR,EAAA,CAAcC,EAAQ,SAAA,0BAAA,0DAK9BF,EASE,OAAA,CAPC,IAAG,GAAK,CAAC,IAAIS,CAAI,GAClB,cAAY,OACX,MAAKR,EAAA,CAAcC,EAAQ,SAAA,0BAAA,0BAI5B,UAAQO;"}
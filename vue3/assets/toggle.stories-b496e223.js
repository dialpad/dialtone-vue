import{a as U}from"./chunk-OPEUWD42-a3b45fd8.js";import{c as D}from"./storybook_utils-8d7a2403.js";import{f as g,m as y,j,k as m,g as p,o as i,a as w,b as B,w as a,d as l,s as o}from"./vue.esm-bundler-00d79a38.js";import{g as E,h as P}from"./utils-d2c6fc19.js";import{_ as f}from"./_plugin-vue_export-helper-c27b6911.js";const h={sm:"d-toggle--small",md:""},I=[!1,!0,"mixed"],$={name:"DtToggle",inheritAttrs:!1,model:{prop:"checked",event:"change"},props:{id:{type:String,default(){return E()}},disabled:{type:Boolean,default:!1},checked:{type:[Boolean,String],default:!1,validator:e=>I.includes(e)},toggleOnClick:{type:Boolean,default:!0},size:{type:String,default:"md",validator:e=>Object.keys(h).includes(e)},showIcon:{type:Boolean,default:!0},labelClass:{type:[String,Array,Object],default:""},labelChildProps:{type:Object,default:()=>({})}},emits:["change"],data(){return{internalChecked:this.checked,hasSlotContent:P}},computed:{inputListeners(){return{...this.$attrs,onClick:e=>this.toggleCheckedValue()}},isIndeterminate(){return this.internalChecked==="mixed"},toggleRole(){return this.isIndeterminate?"checkbox":"switch"},toggleClasses(){return["d-toggle",h[this.size],{"d-toggle--checked":this.internalChecked===!0,"d-toggle--disabled":this.disabled,"d-toggle--indeterminate":this.isIndeterminate}]}},watch:{checked(e){this.internalChecked=e}},mounted(){this.runValidations()},methods:{toggleCheckedValue(){this.$emit("change",!this.internalChecked),this.toggleOnClick&&(this.internalChecked=!this.internalChecked)},hasSlotLabel(){return!!this.$slots.default},runValidations(){this.validateInputLabels(this.hasSlotLabel(),this.$attrs["aria-label"])},validateInputLabels(e,d){}}},M={class:"d-d-flex d-ai-center"},F=["for"],A=["id","role","aria-checked","disabled","aria-disabled"],G={key:0,class:"d-toggle__inner"};function W(e,d,s,_,n,c){return i(),g("div",M,[n.hasSlotContent(e.$slots.default)?(i(),g("label",y({key:0,class:s.labelClass,for:s.id},s.labelChildProps,{"data-qa":"toggle-label"}),[j(e.$slots,"default")],16,F)):m("",!0),p("button",y({id:s.id,role:c.toggleRole,type:"button","aria-checked":n.internalChecked.toString(),disabled:s.disabled,"aria-disabled":s.disabled.toString(),class:c.toggleClasses},c.inputListeners),[s.showIcon?(i(),g("span",G)):m("",!0)],16,A)])}const b=f($,[["render",W]]);$.__docgenInfo={displayName:"DtToggle",description:'A toggle (or "switch") is a button control element that allows the user to make a binary (on/off) selection.',tags:{see:[{description:"https://dialpad.design/components/toggle.html",title:"see"}]},exportName:"default",props:[{name:"id",description:"The id of the toggle",type:{name:"string"},defaultValue:{func:!0,value:"function() { return getUniqueString(); }"}},{name:"disabled",description:"Disables the toggle interactions",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"v-model",description:"Value of the toggle",tags:{model:[{description:"checked",title:"model"}]},values:["true","false","'mixed'"],type:{name:"boolean|string"},defaultValue:{func:!1,value:"false"}},{name:"toggleOnClick",description:`Whether the component toggles on click. If you set this to false it means you will handle the toggling manually
via the checked prop or v-model. Change events will still be triggered.`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"size",description:"The size of the toggle.",tags:{},values:["sm","md"],type:{name:"string"},defaultValue:{func:!1,value:"'md'"}},{name:"showIcon",description:"Shows the icon",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"labelClass",description:"Used to customize the label container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"labelChildProps",description:"A set of props that are passed into the label container",type:{name:"object"},defaultValue:{func:!1,value:"{}"}}],events:[{name:"change",description:"Toggle change event",type:{names:["Boolean"]}}],slots:[{name:"default",description:"Slot for the main content"}],sourceFiles:["/home/runner/work/dialtone-vue/dialtone-vue/components/toggle/toggle.vue"]};const O={name:"ToggleDefault",components:{DtToggle:b}},q=["innerHTML"];function H(e,d,s,_,n,c){const t=w("dt-toggle");return i(),B(t,{checked:e.$attrs.checked,disabled:e.$attrs.disabled,size:e.$attrs.size,"show-icon":e.$attrs.showIcon,"label-class":e.$attrs.labelClass,"label-child-props":e.$attrs.labelChildProps,"toggle-on-click":e.$attrs.toggleOnClick,onChange:e.$attrs.onChange},{default:a(()=>[e.defaultSlot?(i(),g("span",{key:0,innerHTML:e.defaultSlot},null,8,q)):m("",!0)]),_:1},8,["checked","disabled","size","show-icon","label-class","label-child-props","toggle-on-click","onChange"])}const R=f(O,[["render",H]]);O.__docgenInfo={displayName:"ToggleDefault",exportName:"default",description:"",tags:{},sourceFiles:["/home/runner/work/dialtone-vue/dialtone-vue/components/toggle/toggle_default.story.vue"]};const z={name:"ToggleVariants",components:{DtToggle:b},data(){return{vModelValue:!1}}},K={id:"components-toggle--variants-container"},Z=p("div",{class:"d-mr6"}," With Slot Label ",-1),J=p("div",{class:"d-mr6"}," With V-Model ",-1);function Q(e,d,s,_,n,c){const t=w("dt-toggle");return i(),g("div",K,[l(t,{class:"d-mt6","label-class":"d-mr6",label:"Unchecked Initial"},{default:a(()=>[o(" Checked Initial ")]),_:1}),l(t,{class:"d-mt6","label-class":"d-mr6",label:"Checked Initial",checked:!0},{default:a(()=>[o(" Checked Initial ")]),_:1}),l(t,{class:"d-mt6","label-class":"d-mr6",checked:"mixed"},{default:a(()=>[o(" Indeterminate ")]),_:1}),l(t,{class:"d-mt6","label-class":"d-mr6",checked:!0,disabled:!0},{default:a(()=>[o(" Disabled Checked ")]),_:1}),l(t,{class:"d-mt6","label-class":"d-mr6",disabled:!0},{default:a(()=>[o(" Disabled Unchecked ")]),_:1}),l(t,{class:"d-mt6","label-class":"d-mr6",checked:"mixed",disabled:!0},{default:a(()=>[o(" Indeterminate Disabled ")]),_:1}),l(t,{class:"d-mt6","label-class":"d-d-flex d-fl-grow1"},{default:a(()=>[o(" With Flex Grow ")]),_:1}),l(t,{class:"d-mt6"},{default:a(()=>[Z]),_:1}),l(t,{modelValue:n.vModelValue,"onUpdate:modelValue":d[0]||(d[0]=N=>n.vModelValue=N),class:"d-mt6"},{default:a(()=>[J]),_:1},8,["modelValue"]),l(t,{class:"d-mt6","label-class":"d-mr6","show-icon":!1},{default:a(()=>[o(" Without icon ")]),_:1}),l(t,{class:"d-mt6","label-class":"d-mr6",label:"Small size",size:"sm"},{default:a(()=>[o(" Small size ")]),_:1})])}const X=f(z,[["render",Q]]);z.__docgenInfo={displayName:"ToggleVariants",exportName:"default",description:"",tags:{},sourceFiles:["/home/runner/work/dialtone-vue/dialtone-vue/components/toggle/toggle_variants.story.vue"]};const L={default:"Toggle Default",checked:!1,onChange:U("change"),labelClass:"d-mr6"},x={default:{control:"text",description:"Used as a way to set either a label or a label element for the toggle",table:{type:{summary:"VNode"}}},checked:{description:'Used to set the initial state of the toggle. Setting "mixed" means it gets the indeterminate state.',options:I,control:{type:"select"},table:{category:"props",type:{summary:'boolean | "mixed"'},defaultValue:{summary:!1}}},size:{description:"Used to set the size of the toggle",options:Object.keys(h),control:{type:"select"}},id:{table:{defaultValue:{summary:"generated unique ID"}}},"v-model":{description:"Supported by this component",control:null,table:{category:"directives"}},disabled:{description:"Used to disabled the toggle",control:"boolean",table:{category:"props",type:{summary:"boolean"}}},labelChildProps:{control:null},onChange:{table:{disable:!0}},change:{description:"Toggle Change event",table:{type:{summary:"event"}}}},Y={title:"Components/Toggle",component:b,args:L,argTypes:x,excludeStories:/.*Data$/},ee=e=>D(e,R),te=e=>D(e,X),r={render:ee,args:{},parameters:{a11y:{config:{rules:[{id:"button-name",enabled:!1}]}}}},u={render:te,args:{},parameters:{options:{showPanel:!1},a11y:r.parameters.a11y}};var k,v,C;r.parameters={...r.parameters,docs:{...(k=r.parameters)==null?void 0:k.docs,source:{originalSource:`{
  render: DefaultTemplate,
  args: {},
  parameters: {
    a11y: {
      config: {
        rules: [
        // TODO: it's possible to pass a custom aria-label but adding a built-in label can cover most of cases
        {
          id: 'button-name',
          enabled: false
        }]
      }
    }
  }
}`,...(C=(v=r.parameters)==null?void 0:v.docs)==null?void 0:C.source}}};var V,T,S;u.parameters={...u.parameters,docs:{...(V=u.parameters)==null?void 0:V.docs,source:{originalSource:`{
  render: VariantsTemplate,
  args: {},
  parameters: {
    options: {
      showPanel: false
    },
    a11y: Default.parameters.a11y
  }
}`,...(S=(T=u.parameters)==null?void 0:T.docs)==null?void 0:S.source}}};const ae=["argsData","argTypesData","Default","Variants"],ie=Object.freeze(Object.defineProperty({__proto__:null,Default:r,Variants:u,__namedExportsOrder:ae,argTypesData:x,argsData:L,default:Y},Symbol.toStringTag,{value:"Module"}));export{r as D,ie as T,u as V};
//# sourceMappingURL=toggle.stories-b496e223.js.map

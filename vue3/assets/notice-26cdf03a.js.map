{"version":3,"file":"notice-26cdf03a.js","sources":["../../components/notice/notice_constants.js","../../components/notice/notice_icon.vue","../../components/notice/notice_content.vue","../../components/notice/notice_action.vue","../../components/notice/notice.vue"],"sourcesContent":["export const NOTICE_KINDS = ['base', 'error', 'info', 'success', 'warning'];\nexport const NOTICE_ROLES = ['alert', 'alertdialog', 'status'];\n\nexport default {\n  NOTICE_KINDS,\n  NOTICE_ROLES,\n};\n","<template>\n  <div\n    v-if=\"defaultIcon || hasSlotContent($slots.default)\"\n    aria-hidden=\"true\"\n    class=\"d-notice__icon\"\n  >\n    <!-- @slot Slot for the main content -->\n    <slot>\n      <dt-icon\n        :name=\"defaultIcon\"\n        size=\"400\"\n      />\n    </slot>\n  </div>\n</template>\n\n<script>\nimport { DtIcon } from '@/components/icon';\nimport { NOTICE_KINDS } from './notice_constants.js';\nimport { hasSlotContent } from '@/common/utils';\n\nconst kindToIcon = new Map([\n  ['info', 'info'],\n  ['success', 'check-circle'],\n  ['warning', 'alert-triangle'],\n  ['error', 'alert-circle'],\n  ['base', 'bell'],\n]);\n\nexport default {\n  name: 'DtNoticeIcon',\n\n  components: {\n    DtIcon,\n  },\n\n  props: {\n    /**\n     * Kind of icon\n     * @values base, error, info, success, warning\n     */\n    kind: {\n      type: String,\n      default: 'base',\n      validate (kind) {\n        return NOTICE_KINDS.includes(kind);\n      },\n    },\n  },\n\n  data () {\n    return {\n      hasSlotContent,\n    };\n  },\n\n  computed: {\n    defaultIcon () {\n      return kindToIcon.get(this.kind);\n    },\n  },\n};\n</script>\n","<template>\n  <div\n    class=\"d-notice__content\"\n    data-qa=\"notice-content\"\n  >\n    <p\n      v-if=\"title || hasSlotContent($slots.titleOverride)\"\n      :id=\"titleId\"\n      class=\"d-notice__title\"\n      data-qa=\"notice-content-title\"\n    >\n      <!-- @slot Slot for the title  -->\n      <slot name=\"titleOverride\">\n        {{ title }}\n      </slot>\n    </p>\n    <p\n      :id=\"contentId\"\n      class=\"d-notice__message\"\n      data-qa=\"notice-content-message\"\n    >\n      <!-- @slot Slot for main content -->\n      <slot />\n    </p>\n  </div>\n</template>\n\n<script>\nimport { hasSlotContent } from '@/common/utils';\n\nexport default {\n  name: 'DtNoticeContent',\n\n  props: {\n    /**\n     * Title header of the notice. This can be left blank to remove the title from the notice entirely.\n     */\n    title: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * ID for the title element of the component. Useful for aria-describedby\n     * or aria-labelledby or any other reason you may need an id to refer to the title.\n     */\n    titleId: {\n      type: String,\n      default: undefined,\n    },\n\n    /**\n     * ID for the content element of the component. Useful for aria-describedby\n     * or aria-labelledby or any other reason you may need an id to refer to the content.\n     */\n    contentId: {\n      type: String,\n      default: undefined,\n    },\n  },\n\n  data () {\n    return {\n      hasSlotContent,\n    };\n  },\n};\n</script>\n","<template>\n  <div\n    class=\"d-notice__actions\"\n    data-qa=\"notice-content-actions\"\n  >\n    <!-- @slot Slot for main content -->\n    <slot />\n    <dt-button\n      v-if=\"!hideClose\"\n      ref=\"closeButton\"\n      data-qa=\"dt-notice-action-close-button\"\n      size=\"sm\"\n      importance=\"clear\"\n      circle\n      :aria-label=\"closeButtonProps.ariaLabel ? closeButtonProps.ariaLabel : 'Close'\"\n      v-bind=\"closeButtonProps\"\n      @click=\"close\"\n    >\n      <template #icon>\n        <dt-icon\n          name=\"close\"\n          size=\"200\"\n        />\n      </template>\n    </dt-button>\n    <sr-only-close-button\n      v-if=\"showVisuallyHiddenClose\"\n      :visually-hidden-close-label=\"visuallyHiddenCloseLabel\"\n      @close=\"close\"\n    />\n  </div>\n</template>\n\n<script>\nimport { DtIcon } from '@/components/icon';\nimport { DtButton } from '@/components/button';\nimport SrOnlyCloseButtonMixin from '../../common/mixins/sr_only_close_button';\nimport SrOnlyCloseButton from '@/common/sr_only_close_button.vue';\n\nexport default {\n  name: 'DtNoticeAction',\n\n  components: {\n    DtIcon,\n    DtButton,\n    SrOnlyCloseButton,\n  },\n\n  mixins: [SrOnlyCloseButtonMixin],\n\n  props: {\n    /**\n     * Props for the notice close button.\n     */\n    closeButtonProps: {\n      type: Object,\n      default: () => ({}),\n    },\n\n    /**\n     * Hides the close button from the notice\n     * @values true, false\n     */\n    hideClose: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: [\n    /**\n     * Close button click event\n     *\n     * @event close\n     */\n    'close',\n  ],\n\n  created () {\n    if (!this.hideClose && !this.closeButtonProps.ariaLabel) {\n      console.error('Invalid props: you must pass in closeButtonProps.ariaLabel if the close button is displayed.');\n    }\n  },\n\n  mounted () {\n    if (!this.hideClose) {\n      this.lastFocusedElement = document.activeElement;\n    }\n  },\n\n  beforeUnmount () {\n    this.lastFocusedElement?.focus();\n  },\n\n  methods: {\n    close () {\n      this.$emit('close');\n    },\n  },\n};\n</script>\n","<template>\n  <aside\n    :class=\"noticeClass\"\n    data-qa=\"notice\"\n  >\n    <dt-notice-icon\n      :kind=\"kind\"\n    >\n      <!-- @slot Slot for custom icon -->\n      <slot name=\"icon\" />\n    </dt-notice-icon>\n    <dt-notice-content\n      :title-id=\"titleId\"\n      :content-id=\"contentId\"\n      :title=\"title\"\n      :role=\"role\"\n    >\n      <template #titleOverride>\n        <!-- @slot Allows you to override the title, only use this if you need\n        to override with something other than text. Otherwise use the \"title\" prop. -->\n        <slot name=\"titleOverride\" />\n      </template>\n      <!-- @slot the main textual content of the notice -->\n      <slot />\n    </dt-notice-content>\n    <dt-notice-action\n      :hide-close=\"hideClose\"\n      :close-button-props=\"closeButtonProps\"\n      :visually-hidden-close=\"visuallyHiddenClose\"\n      :visually-hidden-close-label=\"visuallyHiddenCloseLabel\"\n      @close=\"$emit('close')\"\n    >\n      <!-- @slot Enter a possible action for the user to take, such as a link to another page -->\n      <slot name=\"action\" />\n    </dt-notice-action>\n  </aside>\n</template>\n\n<script>\nimport DtNoticeIcon from './notice_icon.vue';\nimport DtNoticeContent from './notice_content.vue';\nimport DtNoticeAction from './notice_action.vue';\nimport { NOTICE_KINDS, NOTICE_ROLES } from './notice_constants';\nimport SrOnlyCloseButtonMixin from '../../common/mixins/sr_only_close_button';\n\n/**\n * A notice is an informational and assistive message that appears inline with content.\n * @see https://dialpad.design/components/notice.html\n */\nexport default {\n  name: 'DtNotice',\n\n  components: {\n    DtNoticeIcon,\n    DtNoticeContent,\n    DtNoticeAction,\n  },\n\n  mixins: [SrOnlyCloseButtonMixin],\n\n  props: {\n    /**\n     * Sets an ID on the title element of the component. Useful for aria-describedby\n     * or aria-labelledby or any other reason you may need an id to refer to the title.\n     */\n    titleId: {\n      type: String,\n      default: undefined,\n    },\n\n    /**\n     * Sets an ID on the content element of the component. Useful for aria-describedby\n     * or aria-labelledby or any other reason you may need an id to refer to the content.\n     */\n    contentId: {\n      type: String,\n      default: undefined,\n    },\n\n    /**\n     * Title header of the notice. This can be left blank to remove the title from the notice entirely.\n     */\n    title: {\n      type: String,\n      default: '',\n    },\n\n    /**\n     * Provides a role for the notice. 'status' is used to communicate a message. 'alert' is used to communicate an\n     * important message that does not contain any interactive elements. 'alertdialog' is used to communicate an\n     * important message that does contain interactive elements.\n     * @values alert, alertdialog, status\n     */\n    role: {\n      type: String,\n      default: 'status',\n      validate (role) {\n        return NOTICE_ROLES.includes(role);\n      },\n    },\n\n    /**\n     * Used in scenarios where the message needs to visually dominate the screen.\n     * This will also change the aria role from status to alert.\n     * @values true, false\n     */\n    important: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Severity level of the notice, sets the icon and background\n     * @values base, error, info, success, warning\n     */\n    kind: {\n      type: String,\n      default: 'base',\n      validate (kind) {\n        return NOTICE_KINDS.includes(kind);\n      },\n    },\n\n    /**\n     * Props for the notice close button.\n     */\n    closeButtonProps: {\n      type: Object,\n      default: () => ({}),\n    },\n\n    /**\n     * Hides the close button from the notice\n     * @values true, false\n     */\n    hideClose: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: [\n    /**\n     * Close button click event\n     *\n     * @event close\n     */\n    'close',\n\n    /**\n     * Native button click event\n     *\n     * @event click\n     * @type {PointerEvent | KeyboardEvent}\n     */\n    'click',\n  ],\n\n  computed: {\n    noticeClass () {\n      const noticeKinds = {\n        error: 'd-notice--error',\n        info: 'd-notice--info',\n        success: 'd-notice--success',\n        warning: 'd-notice--warning',\n        base: 'd-notice--base',\n      };\n      return [\n        'd-notice',\n        noticeKinds[this.kind],\n        { 'd-notice--important': this.important },\n      ];\n    },\n  },\n};\n</script>\n"],"names":["NOTICE_KINDS","NOTICE_ROLES","kindToIcon","_sfc_main","DtIcon","kind","hasSlotContent","$options","$data","_ctx","_openBlock","_createElementBlock","_hoisted_1","_renderSlot","_createVNode","_component_dt_icon","$props","_createElementVNode","DtButton","SrOnlyCloseButton","SrOnlyCloseButtonMixin","_a","_createBlock","_component_dt_button","_mergeProps","_component_sr_only_close_button","DtNoticeIcon","DtNoticeContent","DtNoticeAction","role","_component_dt_notice_icon","_component_dt_notice_content","_component_dt_notice_action"],"mappings":"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"}
{"version":3,"file":"tooltip.stories-b8992d2b.js","sources":["../../components/tooltip/tooltip_flip.story.vue","../../components/tooltip/tooltip_default.story.vue","../../components/tooltip/tooltip_variants.vue"],"sourcesContent":["<template>\n  <div class=\"d-m64\">\n    <div\n      ref=\"container\"\n      class=\"container\"\n    >\n      <div class=\"some-text\" />\n      <div class=\"some-text\">\n        <dt-tooltip\n          :id=\"id\"\n          :placement=\"placement\"\n          class=\"tooltip\"\n          :fallback-placements=\"['right', 'bottom']\"\n          :offset=\"offset\"\n          :show=\"true\"\n        >\n          <template\n            slot=\"anchor\"\n            slot-scope=\"{ attrs }\"\n          >\n            <dt-button\n              importance=\"outlined\"\n              :kind=\"buttonKind\"\n              v-bind=\"attrs\"\n            >\n              Click me to see a tooltip\n            </dt-button>\n          </template>\n          <template slot=\"default\">\n            <div>\n              {{ defaultSlot }}\n            </div>\n          </template>\n        </dt-tooltip>\n      </div>\n      <div class=\"some-text\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport DtTooltip from './tooltip.vue';\nimport { DtButton } from '../button';\n\nexport default {\n  name: 'TooltipFlip',\n  components: {\n    DtTooltip,\n    DtButton,\n  },\n\n  computed: {\n    buttonKind () {\n      return this.inverted ? 'inverted' : 'default';\n    },\n  },\n\n  mounted () {\n    this.$refs.container.scrollTo(0, this.$refs.container.scrollHeight / 3);\n  },\n};\n</script>\n\n<style scoped lang=\"less\">\n.tooltip-holder {\n  margin: 150px;\n}\n\n.container {\n  position: relative;\n  width: 800px;\n  height: 300px;\n  background-color: var(--black-050);\n  padding: 10px;\n  border-radius: 10px;\n  overflow-y: scroll;\n  overscroll-behavior: contain;\n  border: 2px dashed #ff6b81;\n}\n\n.some-text {\n  height: 400px;\n  cursor: pointer;\n  padding: 100px 10px 0;\n\n}\n\n.tooltip {\n  margin-left: 4px;\n}\n</style>\n","<template>\n  <div\n    :class=\"[\n      'd-fl-center d-fd-column d-pt64',\n      {\n        'd-bgc-purple-600 d-pb64': inverted,\n      },\n    ]\"\n  >\n    <div class=\"d-pt16\">\n      <dt-tooltip\n        :id=\"id\"\n        :placement=\"placement\"\n        :inverted=\"inverted\"\n        :message=\"message\"\n        :fallback-placements=\"fallbackPlacements\"\n        :offset=\"offset\"\n        :sticky=\"sticky\"\n        :content-class=\"contentClass\"\n        :transition=\"transition\"\n        :show=\"showTooltip\"\n        :delay=\"delay\"\n        @shown=\"onShown\"\n      >\n        <template\n          slot=\"anchor\"\n        >\n          <dt-button\n            importance=\"outlined\"\n            :kind=\"buttonKind\"\n          >\n            {{ anchor }}\n          </dt-button>\n        </template>\n        <template v-if=\"defaultSlot\">\n          {{ defaultSlot }}\n        </template>\n      </dt-tooltip>\n    </div>\n  </div>\n</template>\n\n<script>\nimport DtTooltip from './tooltip.vue';\nimport { DtButton } from '../button';\n\nexport default {\n  name: 'TooltipDefault',\n  components: {\n    DtTooltip,\n    DtButton,\n  },\n\n  inheritAttrs: false,\n\n  computed: {\n    buttonKind () {\n      return this.inverted ? 'inverted' : 'default';\n    },\n\n    showTooltip () {\n      if (this.globalShow) {\n        return true;\n      }\n\n      return this.show;\n    },\n  },\n};\n</script>\n","<!-- eslint-disable vue/no-bare-strings-in-template -->\n<template>\n  <div\n    id=\"forms-radio--variants-container\"\n    class=\"d-pt128 d-px64\"\n  >\n    <!-- Arrow Description -->\n    <div\n      v-for=\"(rowDirection, i) in TOOLTIP_DIRECTIONS\"\n      :key=\"i\"\n      class=\"d-mb128 d-d-flex d-jc-center d-ai-center\"\n    >\n      <div\n        v-for=\"direction in rowDirection\"\n        :key=\"direction\"\n      >\n        <dt-tooltip\n          v-if=\"direction !== null\"\n          :transition=\"transition\"\n          :placement=\"direction\"\n          :message=\"localMessage\"\n          :show=\"show\"\n          class=\"d-mx64\"\n        >\n          <template #anchor>\n            <dt-button\n              importance=\"outlined\"\n              class=\"d-w128\"\n            >\n              {{ direction }}\n            </dt-button>\n          </template>\n        </dt-tooltip>\n      </div>\n    </div>\n    <div class=\"d-d-flex d-jc-center d-w100p\">\n      <!-- Text -->\n      <dt-tooltip\n        class=\"d-mb64 d-mt64\"\n        :transition=\"transition\"\n        :message=\"localMessage\"\n        :show=\"show\"\n      >\n        <template #anchor>\n          <dt-button link>\n            Link Tooltip\n          </dt-button>\n        </template>\n      </dt-tooltip>\n    </div>\n    <div class=\"d-d-flex d-jc-center d-w100p\">\n      <!-- Open state -->\n      <dt-tooltip\n        class=\"d-mb64 d-mt32\"\n        :transition=\"transition\"\n        :message=\"localMessage\"\n        :show=\"show1\"\n      >\n        <template #anchor>\n          <dt-button\n            importance=\"outlined\"\n            @click=\"show1 = !show1\"\n          >\n            Open on click\n          </dt-button>\n        </template>\n      </dt-tooltip>\n    </div>\n    <div class=\"d-bgc-purple-600 d-pt64 d-d-flex d-jc-center\">\n      <div class=\"d-py64\">\n        <!-- Inverted state -->\n        <dt-tooltip\n          :inverted=\"true\"\n          :transition=\"transition\"\n          :message=\"localMessage\"\n          :show=\"show\"\n        >\n          <template #anchor>\n            <dt-button\n              kind=\"inverted\"\n              importance=\"outlined\"\n            >\n              Inverted\n            </dt-button>\n          </template>\n        </dt-tooltip>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport DtTooltip from './tooltip.vue';\nimport { DtButton } from './../button';\nimport { TOOLTIP_DIRECTIONS } from './tooltip_constants';\n\nfunction sliceIntoChunks (arr, chunkSize) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += chunkSize) {\n    const chunk = arr.slice(i, i + chunkSize);\n    res.push(chunk);\n  }\n  return res;\n}\n\nexport default {\n  name: 'TooltipVariants',\n  components: { DtTooltip, DtButton },\n  data () {\n    return {\n      TOOLTIP_DIRECTIONS: sliceIntoChunks(this.customDirections || TOOLTIP_DIRECTIONS, 3),\n\n      localMessage: `This is a simple tooltip. The tooltip can be positioned in multiple areas too!`,\n      show1: this.show ?? false,\n    };\n  },\n};\n</script>\n"],"names":["_sfc_main","DtTooltip","DtButton","sliceIntoChunks","arr","chunkSize","res","i","chunk","TOOLTIP_DIRECTIONS"],"mappings":"8PA4CA,MAAAA,EAAA,CACA,KAAA,cACA,WAAA,CACA,UAAAC,EACA,SAAAC,CACA,EAEA,SAAA,CACA,YAAA,CACA,OAAA,KAAA,SAAA,WAAA,SACA,CACA,EAEA,SAAA,CACA,KAAA,MAAA,UAAA,SAAA,EAAA,KAAA,MAAA,UAAA,aAAA,CAAA,CACA,CACA,45BCdA,MAAAF,EAAA,CACA,KAAA,iBACA,WAAA,CACA,UAAAC,EACA,SAAAC,CACA,EAEA,aAAA,GAEA,SAAA,CACA,YAAA,CACA,OAAA,KAAA,SAAA,WAAA,SACA,EAEA,aAAA,CACA,OAAA,KAAA,WACA,GAGA,KAAA,IACA,CACA,CACA,64BC4BA,SAAAC,EAAAC,EAAAC,EAAA,CACA,MAAAC,EAAA,CAAA,EACA,QAAAC,EAAA,EAAAA,EAAAH,EAAA,OAAAG,GAAAF,EAAA,CACA,MAAAG,EAAAJ,EAAA,MAAAG,EAAAA,EAAAF,CAAA,EACAC,EAAA,KAAAE,CAAA,EAEA,OAAAF,CACA,CAEA,MAAAN,EAAA,CACA,KAAA,kBACA,WAAA,CAAA,UAAAC,EAAA,SAAAC,CAAA,EACA,MAAA,CACA,MAAA,CACA,mBAAAC,EAAA,KAAA,kBAAAM,EAAA,CAAA,EAEA,aAAA,iFACA,MAAA,KAAA,MAAA,EACA,CACA,CACA;;;;;;;;;;;;;;;;;;;;;;;;;;;"}